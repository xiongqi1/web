object Device {
	object XVENDOR() {
		object Services {
			object SAS {
				param AntennaHeight string notify(0,0,2) readonly rdb("sas.antenna.height", 1, 0, 64, null, "");
				param AntennaType string notify(0,0,2) readonly rdb("sas.antenna.height_type_selected", 1, 0, 64, null, "");
				param AntennaLatitude string notify(0,0,2) readonly rdb("sas.antenna.latitude", 1, 0, 64, null, "");
				param AntennaLongitude string notify(0,0,2) readonly rdb("sas.antenna.longitude", 1, 0, 64, null, "");
				param AntennaAzimuth string notify(0,0,2) readonly rdb("sas.antenna.azimuth", 1, 0, 64, null, "");
				param AntennaDowntilt string notify(0,0,2) readonly rdb("sas.antenna.downtilt", 1, 0, 64, null, "");
				param ConfigCpiId string notify(0,0,2) readonly rdb("sas.config.cpiId", 1, 0, 64, null, "");
				param ConfigCpiName string notify(0,0,2) readonly rdb("sas.config.cpiName", 1, 0, 64, null, "");
				param ConfigFccId string notify(0,0,2) readonly rdb("sas.config.fccid", 1, 0, 64, null, "");
				param ConfigInstallCertificationTime string notify(0,0,2) readonly rdb("sas.config.installCertificationTime", 1, 0, 64, null, "");
				param ConfigServerUrl string notify(2,2,3) readwrite rdb("sas.config.url", 1, 0, 64, null, "");
				param ConfigUserId string notify(0,0,2) readonly rdb("sas.config.userId", 1, 0, 64, null, "");
				param RegistrationState string notify(2,2,3) readonly rdb("sas.registration.state", 1, 0, 64, null, "");
				param RegistrationMethod string notify(0,0,2) readonly rdb("sas.regMethod", 1, 0, 64, null, "");
				param RegistrationResponse string notify(0,0,2) readonly rdb("sas.registration.response_code", 1, 0, 64, null, "");
				param TransmitEnable string notify(2,2,3) readonly rdb("sas.transmit_enabled", 1, 0, 64, null, "");
				param NumberOfGrants string notify(2,0,2) readonly dynamic("v_cbrs_sas_y", "");
				object ServingCell {
					param Authorized string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param Pci string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param PciEarfcn string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param RequiredGrantIdx string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param FreqRange string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param EcgiList string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
				};
				object NeighborCell {
					param Authorized string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param Pci string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param PciEarfcn string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param RequiredGrantIdx string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param FreqRange string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					param EcgiList string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
				};
				collection Grant dynamic('v_cbrs_sas_y', "") {
					default {
						param Id string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param State string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param FreqLow string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param FreqHigh string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param RequiredFor string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param NextHeartbeat string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param ExpireTime string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param ChannelType string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
						param Eirp string notify(0,0,2) readonly dynamic('v_cbrs_sas_y', "");
					};
				};
			};
		};
	};
};

// END OF FILE: Do Not delete this line
