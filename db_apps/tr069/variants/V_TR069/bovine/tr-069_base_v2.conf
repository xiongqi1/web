/* Warning on comment.
 1. C-languange style comments are taken out in preprocessing stage.
 2. If you want to leave a comment, use "#" character that is a comment character in the configuration file parser in TR069 client.
 3. Do not use "#" as a leading character in each line. This could cause compilation failure. In this case, use "##".
*/

#define BAR(x) #x
#define QUOTE(x) BAR(x)

/*
 * We have to use the following macro define since all variant specific
 * add/del_*.conf were written with a hardcoded root of InternetGatewayDevice.
 */
#define InternetGatewayDevice Device

object InternetGatewayDevice {
	param RootDataModelVersion string notify(0,0,3) readonly const("2.9");

	object DeviceInfo {
		param Manufacturer string notify(0,0,2) readonly const("NetComm Wireless Limited");
		param ManufacturerOUI string notify(0,0,2) readonly rdb("systeminfo.oui", 1, 0, 64, null, "006064");
		param ModelName string notify(0,0,2) readonly rdb("system.product.model", 1, 0, 64, null, QUOTE(_V_PRODUCT_));
		param Description string notify(0,0,2) readonly rdb("system.product.title", 1, 0, 256, null, QUOTE(_V_IDENTITY_));
		param ProductClass string notify(0,0,2) readonly rdb("system.product.class", 1, 0, 64, null, QUOTE(_V_CLASS_));
		param SerialNumber string notify(0,0,2) readonly rdb("systeminfo.serialnumber", 1, 0, 64, null, "");
		param HardwareVersion string notify(0,0,3) readonly rdb("uboot.hw_ver", 1, 0, 64, null, "N/A");
		param SoftwareVersion string notify(2,2,3) readonly rdb("sw.version", 1, 0, 64, null, "N/A");
		param ModemFirmwareVersion string notify(0,0,2) readonly rdb("wwan.0.firmware_version", 0, 0, 64, null, "N/A");
		param SpecVersion string notify(0,0,3) readonly const("1.0");
		param ProvisioningCode string notify(2,2,3) readwrite rdb("tr069.state.provisioning_code", 1, 0, 64, null, "");
		param UpTime uint notify(0,0,2) readonly dynamic('time', 0); # NTP time handler also supports UpTime
		param DeviceLog string notify(0,0,1) readonly dynamic('management', "");
		param FirstUseDate datetime notify(0,0,2) readonly rdb('system.first_use_date', 1, 0, 253402300799, null, 0); ## ntpclient.sh will update the rdb
		param VendorLogFileNumberOfEntries uint notify(0,0,2) readonly const("1");
		collection VendorLogFile const("") { ##readonly
			object 1 { /* informational only */
				param Name string notify(0,0,2) readonly const("syslog"); ## const as specified by customer
				param MaximumSize uint notify(0,0,2) readonly const("0");
				param Persistent bool notify(0,0,2) readonly const("0");
			};
		};
		param SupportedDataModelNumberOfEntries uint notify(0,0,2) readonly const("1");
		collection SupportedDataModel const("") { ##readonly
			object 1 {
				param URL string notify(0,0,2) readonly const("http://localhost/tr069_sdm_1.xml"); ## the URL of the device type xml
				param URN string notify(0,0,2) readonly const("urn:broadband-forum-org:tr-181-2-10-0"); ## the URN of the data model instance that defines the root object
				param Features string notify(0,0,2) readonly const(""); ## features as specified by the device type instance
			};
		};
		object MemoryStatus {
			param Total uint notify(0,0,1) readonly dynamic("memory", 0); ## total RAM in kB
			param Free uint notify(0,0,1) readonly dynamic("memory", 0); ## free RAM in kB
		};
		object ProcessStatus {
			param CPUUsage uint notify(0,0,1) readonly dynamic("memory", 0); ## total cpu usage in percent
			param ProcessNumberOfEntries uint notify(0,0,1) readonly dynamic("memory", 0);
			collection Process const("") { ##readonly
				default {
					param PID uint notify(0,0,1) readonly dynamic("memory", 0); ## process id
					param Command string notify(0,0,1) readonly dynamic("memory", ""); ## command of the process
					param Size uint notify(0,0,1) readonly dynamic("memory", 0); ## memory size occupied by the process in kB
					param Priority uint notify(0,0,1) readonly dynamic("memory", 0); ## process priority 0(high) - 99(low)
					param CPUTime uint notify(0,0,1) readonly dynamic("memory", 0); ## cpu time in ms the process has taken up
					param State string notify(0,0,1) readonly dynamic("memory", ""); ## current state of the process: Running|Sleeping|Stopped|Idle|Uninterruptible|Zombie
				};
			};
		};

	};

	object ManagementServer {
		param EnableCWMP bool notify(0,0,2) readwrite rdb("service.tr069.enable", 1, null, null, null, 1);
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://rdm.nwas.nbnco.net.au:38080/tr069devicemanagement/tr069webservice");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://qanetcomm.acslite.com/cpe.php");
		param URL string notify(2,2,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://192.168.0.41/acs/cwmp.php");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://10.100.1.1/acs/cwmp.php");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://192.121.199.178:38080/tr069devicemanagement/tr069webservice");
		param Username string notify(0,0,2) readwrite rdb("tr069.server.username", 1, 0, 256, null, "cpe");
		param Password string notify(0,0,2) writeonly rdb("tr069.server.password", 1, 0, 256, null, "cpe");
		param CWMPRetryMinimumWaitInterval uint notify(0,0,2) readwrite rdb("tr069.server.retry.minimum", 1, 5, null, null, 5);
		param CWMPRetryIntervalMultiplier uint notify(0,0,2) readwrite rdb("tr069.server.retry.multiplier", 1, 0, null, null, 2000);
//		param Password uint notify(0,0,2) writeonly rdb("tr069.server.retry_minimum", 1, 0, 256, null, 5);
		param PeriodicInformEnable bool notify(0,0,2) readwrite rdb("tr069.server.periodic.enable", 1, null, null, null, 1);
		param PeriodicInformInterval uint notify(0,0,2) readwrite rdb("tr069.server.periodic.interval", 1, 1, null, null, 60);
		param PeriodicInformTime datetime notify(0,0,2) readwrite rdb("tr069.server.periodic.time", 1, null, null, null, 0);
		param ParameterKey string notify(0,0,3) readwrite rdb("tr069.server.paramkey", 1, 0, 32, null, "");
		param ConnectionRequestURL string notify(2,0,3) readonly dynamic('management', "");
		param ConnectionRequestUsername string notify(0,0,2) readwrite rdb("tr069.request.username", 1, 0, 256, null, "acs");
		param ConnectionRequestPassword string notify(0,0,2) writeonly rdb("tr069.request.password", 1, 0, 256, null, "acs");
		param UpgradesManaged bool notify(0,0,2) readwrite rdb("tr069.server.upgrades_managed", 1, null, null, null, 0);
		param STUNEnable bool notify(0,0,2) readonly const("0"); ## always disabled as per customer requirement
	};

	object Layer3Forwarding {
		param DefaultConnectionService string notify(0,0,2) readonly const("Device.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1");
		param ForwardNumberOfEntries uint notify(0,0,2) readonly dynamic('layer3Forwarding', 0);
		collection Forwarding dynamic('layer3Forwarding', "") {
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('layer3Forwarding', 0);
				param Status string notify(0,0,2) readwrite dynamic('layer3Forwarding', "Disabled");
				param Type string notify(0,0,2) readwrite dynamic('layer3Forwarding', "Host");
				param DestIPAddress string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param DestSubnetMask string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param SourceIPAddress string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param SourceSubnetMask string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param ForwardingPolicy int notify(0,0,2) readwrite dynamic('layer3Forwarding', -1);
				param GatewayIPAddress string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param Interface string notify(0,0,2) readwrite dynamic('layer3Forwarding', "");
				param ForwardingMetric int notify(0,0,2) readwrite dynamic('layer3Forwarding', 0);
				param MTU uint notify(0,0,2) readwrite dynamic('layer3Forwarding', 1500);
			};
		};
	};

	object Ethernet {
		param InterfaceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 0);
		param LinkNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 0);
		collection Interface const("") { ##readonly
			object 1 {
				param Enable bool notify(0,0,2) readwrite dynamic('ethernetDevice', 1);
				param Status string notify(0,0,2) readonly dynamic('ethernetDevice', ''); ## Up|Down|Unknown
				param Name string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param MACAddress string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param MaxBitRate int notify(0,0,2) readwrite dynamic('ethernetDevice', -1); ## maximum upstream and downstream PHY bit rate in Mbps
				param DuplexMode string notify(0,0,2) readwrite dynamic('ethernetDevice', ''); ## Half|Full|Auto
				object Stats {
					param BytesSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param BytesReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param MulticastPacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				};
			};
		};

		collection Link const("") { ##readonly
			object 1 {
				param Enable bool notify(0,0,2) readwrite dynamic('ethernetDevice', 1);
				param Status string notify(0,0,2) readonly dynamic('ethernetDevice', ''); ## Up|Down|Unknown
				param Name string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param MACAddress string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param LowerLayers string notify(0,0,2) readwrite dynamic('ethernetDevice', ''); ## path name of the Interface object below this Link object
				object Stats {
					param BytesSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param BytesReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param MulticastPacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				};
			};
		};
	};

	object LANConfigSecurity {
		param ConfigPassword string notify(0,0,2) writeonly rdb("admin.user.root", 1, 0, 64, null, "");
		param X_NETCOMM_AdminAccountConfigPassword string notify(0,0,2) writeonly rdb("admin.user.admin", 1, 0, 64, null, "");
	};

	param LANDeviceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', "0");
	collection LANDevice const("") {
		object 1 {
			object LANHostConfigManagement {
				param MACAddress string notify(0,0,2) readonly rdb("systeminfo.mac.eth0", 1, null, null, null, "00:00:00:00:00:00");
				param DHCPServerEnable bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "1");
				param DHCPRelay bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "0");
				param X_NETCOMM_DHCPRelayAddr string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");  ## DHCP Relay Server address
				param MinAddress string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
				param MaxAddress string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
				param ReservedAddresses string notify(0,0,2) readonly dynamic('lanDevice_HostConf', "");  ## Comma-separated list of reserved addresses
				param SubnetMask string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "255.255.255.0");
				param DNSServers string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");  ## Comma-separated list of at most two DNS servers offered to DHCP clients. Not to set specific DNS address, leave the address empty or set to "0.0.0.0"
				param DomainName string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
				param IPRouters string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");  ## Support only one gateway address (Currently LAN IP is used as a gatway address, so the value applied to this parameter is also applied to the LAN IP address of a router)
				param DHCPLeaseTime int notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "86400");  ## -1(infinite lease) does not support.

				param IPInterfaceNumberOfEntries uint notify(0,0,2) readonly const("1");
				collection IPInterface const("") {
					object 1 {
						param Enable bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "1");
						param IPInterfaceIPAddress string notify(0,0,2) readwrite rdb("link.profile.0.address", 1, null, null, null, "192.168.20.1");
						param IPInterfaceSubnetMask string notify(0,0,2) readwrite rdb("link.profile.0.netmask", 1, null, null, null, "255.255.255.0");
						param IPInterfaceAddressingType string notify(0,0,2) readonly const("Static"); # Supported only "Static"
					};
				};

				param DHCPStaticAddressNumberOfEntries uint notify(0,0,2) readonly dynamic('lanDevice_HostConf', "");
				collection DHCPStaticAddress dynamic('lanDevice_HostConf', "") {  ## Supported AddObject/DeleteObject methods
					default {
						param Enable bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "0");
						param Chaddr string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "00:00:00:00:00:00");  ## Should be "xx:xx:xx:xx:xx:xx"
						param Yiaddr string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "0.0.0.0");
						param X_NETCOMM_ComputerName string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
					};
				};
			};
			param LANEthernetInterfaceNumberOfEntries uint notify(0,0,2) readonly const("0");
			param LANUSBInterfaceNumberOfEntries uint notify(0,0,2) readonly const("0");
			param LANWLANConfigurationNumberOfEntries uint notify(0,0,2) readonly const("0");
			object Hosts {
				param HostNumberOfEntries uint notify(0,0,2) readonly dynamic('dhcp', "0");
				collection Host dynamic('dhcp', "0") { ##readonly
					default {
						param IPAddress string notify(0,0,2) readonly dynamic('dhcp', "");
						param AddressSource string notify(0,0,2) readonly const("DHCP");
						param LeaseTimeRemaining int notify(0,0,2) readonly dynamic('dhcp', "-1");
						param MACAddress string notify(0,0,2) readonly dynamic('dhcp', "");
						param HostName string notify(0,0,2) readonly dynamic('dhcp', "");
						param InterfaceType string notify(0,0,2) readonly dynamic('dhcp', "");
						param Active bool notify(0,0,2) readonly const("1");
					};
				};
			};
		};
		
	};

	param WANDeviceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', "0");
	collection WANDevice const("") { ##readonly
		object 1 {  ## This instance number is fixed for Wireless Modem
			param WANConnectionNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");  // Should be dynamic to register clean up handler in inti handler

			object WANCommonInterfaceConfig {
				param EnabledForInternet bool notify(0,0,2) readonly const("1");
				param WANAccessType string notify(0,0,2) readonly const("WirelessModem");
//				param Layer1UpstreamMaxBitRate uint notify(0,0,2) readonly rdb("wwan.0.module.speed.max_up", 0, null, null, null, "5760000");
//				param Layer1DownstreamMaxBitRate uint notify(0,0,2) readonly rdb("wwan.0.module.speed.max_down", 0, null, null, null, "42000000");
				param WANAccessProvider string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "Unknown");
				param PhysicalLinkStatus string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "Unavailable");
				param TotalBytesSent uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param TotalBytesReceived uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param TotalPacketsSent uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param TotalPacketsReceived uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param MaximumActiveConnections uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param NumberOfActiveConnections uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");

				collection Connection dynamic('wanDevice_wwan_singlePDP', "") { ##readonly
					default {
						param ActiveConnectionDeviceContainer string notify(0,0,1) readonly dynamic('wanDevice_wwan_singlePDP', "");
						param ActiveConnectionServiceID string notify(0,0,1) readonly dynamic('wanDevice_wwan_singlePDP', "");
					};
				};
				
			};
			object WANConnectionDevice {
				param WANIPConnectionNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");
				param WANPPPConnectionNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");
				object 1 {
					collection WANIPConnection dynamic('wanDevice_wwan_singlePDP', "") {
						default {
							param Enable bool notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "1");
							param ConnectionStatus string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");
							param PossibleConnectionTypes string notify(0,0,2) readonly const("IP_Routed");
							param ConnectionType string notify(0,0,2) readonly const("IP_Routed");  ## "IP_Routed" only
							param Name string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
							param Uptime uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
							param LastConnectionError string notify(0,0,2) readonly const("ERROR_NONE");
// Bovine doesn't support							param AutoDisconnectTime uint notify(0,0,2) readwrite const("0");
// Bovine doesn't support							param IdleDisconnectTime uint notify(0,0,2) readwrite const("0");
// Bovine doesn't support							param WarnDisconnectDelay uint notify(0,0,2) readwrite const("0");
							param RSIPAvailable bool notify(0,0,2) readonly const("0");
							param NATEnabled bool notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "0");
							param AddressingType string notify(0,0,2) readonly const('DHCP');  ## "DHCP" only

							param ExternalIPAddress string notify(2,0,3) readonly dynamic('wanDevice_wwan_singlePDP', "");  ## does not support write attribute
							param SubnetMask string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");  ## does not support write attribute
							param DefaultGateway string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");

//							param DNSEnabled bool notify(0,0,2) readwrite dynamic('wanDevice', "");
//							param DNSOverrideAllowed bool notify(0,0,2) readwrite dynamic('wanDevice', "");
//							param DNSServers string notify(0,0,2) readwrite dynamic('wanDevice', "");
							param DNSEnabled bool notify(0,0,2) readonly const("1");
							param DNSOverrideAllowed bool notify(0,0,2) readonly const("0");
							param DNSServers string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");

							param MaxMTUSize uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
							param MACAddress string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', ""); ## does not support write attribute
							param MACAddressOverride bool notify(0,0,2) readonly const("0");
// Bovine doesn't support							param ConnectionTrigger string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
							param RouteProtocolRx string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', ""); ## Default Value: Off, Available Value: Off|RIPv1|RIPv2
//							param PortMappingNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");

							object X_NETCOMM_APNProfile {
								param ProfileName string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param APN string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param AuthenticationType string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: CHAP, Available Value: CHAP|PAP
								param UserName string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param Password string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param ReconnectDelay uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: 30, Available Value: 30~65535 (unit: seconds)
								param ReconnectRetries uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: 0, Available Value: 0~65535, 0=Unlimited 
								param InterfaceMetric uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: 20, Available Value: 0~65535
							};
						};

						param X_NETCOMM_PortMappingNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice', "");
						collection X_NETCOMM_PortMapping dynamic('wanDevice', "") {
							default {
								param PortMappingEnabled bool notify(0,0,2) readwrite dynamic('wanDevice', "0");
								param PortMappingLeaseDuration uint notify(0,0,2) readwrite dynamic('wanDevice', "0");
								param RemoteHost string notify(0,0,2) readwrite dynamic('wanDevice', "");
								param ExternalPort uint notify(0,0,2) readwrite dynamic('wanDevice', "10000");
								param ExternalPortEndRange uint notify(0,0,2) readwrite dynamic('wanDevice', "0");
								param InternalPort uint notify(0,0,2) readwrite dynamic('wanDevice', "10000");
								param PortMappingProtocol string notify(0,0,2) readwrite dynamic('wanDevice', "tcp");
								param InternalClient string notify(0,0,2) readwrite dynamic('wanDevice', "");
								param PortMappingDescription string notify(0,0,2) readwrite dynamic('wanDevice', "");
							};
						};
					};
				};
			};
		};
	};

	object Cellular {
		param RoamingEnabled bool notify(0,0,2) readwrite rdb('roaming.data.en', 1, null, null, null, 0);
		param RoamingStatus string notify(0,0,2) readonly dynamic('cellularDevice', 'Home'); ## Home|Roaming
		param InterfaceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 1);
		collection Interface dynamic("cellularDevice", "") { ##readonly
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('cellularDevice', 1);
				param Status string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## Up|Down|Unknown
				param Name string notify(0,0,2) readonly dynamic('cellularDevice', '');
				param IMEI string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## IMEI represented as a 15-digit string
				param NetworkInUse string notify(0,0,2) readonly dynamic('cellularDevice', '');
				param CurrentAccessTechnology string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## GPRS|EDGE|UMTS|LTE
				object USIM {
					param Status string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## None|Available|Valid|Blocked|Error
					param MSISDN string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## MSISDN that uniquely identifying a subscription in GSM/UMTS/LTE network
				};
				object Stats {
					param BytesSent uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param BytesReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param PacketsSent uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param PacketsReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param MulticastPacketsReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
				};
			};
		};
		param AccessPointNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 1);
		collection AccessPoint const("") { ##readonly
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('cellularDevice', 0);
				param Interface string notify(0,0,2) readwrite dynamic('cellularDevice', ''); ## path name of the corresponding Cellular.Interface instance
				param APN string notify(0,0,2) readwrite dynamic('cellularDevice', '');
			};
		};

	};

	// Time:1 Profile
	object Time {
		param Enable bool notify(0,0,2) readwrite rdb("service.ntp.enable", 1, null, null, null, 0); ## enable/disable the NTP time client
		param Status string notify(0,0,2) readonly rdb("service.ntp.status", 0, null, null, null, "Disabled"); ## status of time support: Disabled|Unsynchronized|Synchronized|Error_FailedToSynchronize|Error
		param NTPServer1 string notify(0,0,2) readwrite rdb("service.ntp.server_address", 1, 0, 64, null, "au.pool.ntp.org");
		param CurrentLocalTime datetime notify(0,0,1) readonly dynamic('time', 0); ## The current date and time in the CPE's local time zone
		param LocalTimeZone string notify(0,0,2) readwrite dynamic('time', "UTC0"); ## The local time zone encoded according to IEEE 1003.1 (POSIX)
		param X_NETCOMM_LTZoneNameList string notify(0,0,0) readonly dynamic('time', "");  ## Extended parameter to list available values on LocalTimeZoneName. Format is "NAME: LocalTimeZoneName;"
	};

	// PeriodicStatsBase:1 Profile
	object PeriodicStatistics {
		param MinSampleInterval uint notify(0,0,2) readonly const("0");
		param MaxReportSamples uint notify(0,0,2) readonly const("0");
		param SampleSetNumberOfEntries uint notify(0,0,2) readonly dynamic("common", 0);
		collection SampleSet dynamic('periodicStats', '') {
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('periodicStats', 0); ## enable (1)/disable(0) the whole sample set
				param Name string notify(0,0,2) readwrite dynamic("periodicStats", ""); ## name of the sample set
				param SampleInterval uint notify(0,0,2) readwrite dynamic("periodicStats", 3600); ## sample interval in seconds. default 3600.
				param ReportSamples uint notify(0,0,2) readwrite dynamic("periodicStats", 24); ## number of samples to keep in storage. default 24.
				param ReportStartTime datetime notify(0,0,2) readonly dynamic("periodicStats", ""); ## time when the first stored sample interval starts.
				param ReportEndTime datetime notify(0,0,2) readonly dynamic("periodicStats", ""); ## time when the last stored sample was taken.
				param SampleSeconds string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated values of seconds of each sample
				param ParameterNumberOfEntries uint notify(0,0,2) readonly dynamic("periodicStats", 0);
				collection Parameter dynamic('periodicStats', '') {
					default {
						param Enable bool notify(0,0,2) readwrite dynamic('periodicStats', 0); ## enable (1)/disable(0) the individual parameter
						param Reference string notify(0,0,2) readwrite dynamic("periodicStats", ""); ## path name of the parameter of interest
						param SampleSeconds string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated values of seconds of each sample
						param SuspectData string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated 0-1 values to indicate unreliable data
						param Values string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated values of sample results
					};
				};
			};
		};
	};

	object IP {
		object Diagnostics {
			// Download:1 Profile
			param IPv4DownloadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6DownloadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object DownloadDiagnostics {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Completed|Error_xxx
				param Interface string notify(0,0,2) readwrite dynamic("tr143", ""); ## path name of an IP-layer interface, empty means up to routing policy
				param DownloadURL string notify(0,0,2) readwrite dynamic("tr143", ""); ## must be "http://host/..."
				param DownloadTransports string notify(0,0,2) readonly dynamic("tr143", "HTTP"); ## must be HTTP
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param EthernetPriority uint notify(0,0,2) readwrite dynamic("tr143", 0); ## ethernet priority code, must be 0
				param ROMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## request (GET) time in UTC with microsecond precision
				param BOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## begin of transmission (first packet received) time in UTC with microsecond precision
				param EOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## end of transmission time in UTC with microsecond precision
				param TestBytesReceived uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes received during http transaction including headers between BOMTime and EOMTime
				param TotalBytesReceived uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes received at IP layer on the interface between BOMTime and EOMTime
				param TCPOpenRequestTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open request (SYN) time in UTC with microsecond precision
				param TCPOpenResponseTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open response (ACK) time in UTC with microsecond precision
			};
			// Upload:1 Profile
			param IPv4UploadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6UploadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object UploadDiagnostics {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Completed|Error_xxx
				param Interface string notify(0,0,2) readwrite dynamic("tr143", ""); ## path name of an IP-layer interface, empty means up to routing policy
				param UploadURL string notify(0,0,2) readwrite dynamic("tr143", ""); ## must be "http://host/..."
				param UploadTransports string notify(0,0,2) readonly dynamic("tr143", "HTTP"); ## must be HTTP
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param EthernetPriority uint notify(0,0,2) readwrite dynamic("tr143", 0); ## ethernet priority code, must be 0
				param ROMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## request (PUT) time in UTC with microsecond precision
				param BOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## begin of transmission (first packet received) time in UTC with microsecond precision
				param EOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## end of transmission time in UTC with microsecond precision
				param TestFileLength uint notify(0,0,2) readwrite dynamic("tr143", 0); ## size of the file in bytes to be uploaded to the server
				param TestBytesSent uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes of the test file sent druing http transaction including headers between BOMTime and EOMTime
				param TotalBytesSent uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes sent at IP layer on the interface between BOMTime and EOMTime
				param TCPOpenRequestTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open request (SYN) time in UTC with microsecond precision
				param TCPOpenResponseTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open response (ACK) time in UTC with microsecond precision
			};
			// IPPing:1 Profile
			param IPv4PingSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6PingSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object IPPing {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Canceled|Complete|Error_xxx
				param Interface string notify(0,0,2) readwrite dynamic("tr143", ""); ## path name of an IP-layer interface, empty means up to routing policy
				param Host string notify(0,0,2) readwrite dynamic("tr143", ""); ## host name or ip address of the host to ping
				param NumberOfRepetitions uint notify(0,0,2) readwrite dynamic("tr143", 3); ## number of repetitions of the ping test to perform before reporting
				param Timeout uint notify(0,0,2) readwrite dynamic("tr143", 5000); ## timeout in milliseconds
				param DataBlockSize uint notify(0,0,2) readwrite dynamic("tr143", 56); ## size of the data block in bytes to be sent for each ping
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param SuccessCount uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of successful pings
				param FailureCount uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of failed pings
				param AverageResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## average response time in milliseconds
				param MinimumResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## minimum response time in milliseconds
				param MaximumResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## maximum response time in milliseconds
			};
		};
	};

	object X_NETCOMM {
		object WirelessModem {
			object Status {
				param IMEI string notify(0,0,2) readonly rdb('wwan.0.imei', 0, 0, 256, null, '');
				param Manufacturer string notify(0,0,2) readonly rdb('wwan.0.manufacture', 0, 0, 256, null, '');
				param HardwareVersion string notify(0,0,2) readonly rdb('wwan.0.hardware_version', 0, 0, 256, null, '');
				param FirmwareVersion string notify(0,0,2) readonly rdb('wwan.0.firmware_version', 0, 0, 256, null, '');
				param Model string notify(0,0,2) readonly dynamic('wireless3g', '');
				param NetworkProvider string notify(0,0,2) readonly dynamic('wireless3g', '');
				param NetworkAttached bool notify(0,0,2) readonly rdb('wwan.0.system_network_status.attached', 0, 0, 256, null, '0');
				param PDPStatus string notify(0,0,2) readonly dynamic('wireless3g', '');
				param LAC_CellID string notify(0,0,2) readonly dynamic('wireless3g', '');
				param ServiceType string notify(0,0,2) readonly rdb('wwan.0.system_network_status.service_type', 0, 0, 256, null, '');
				param CurrentBand string notify(0,0,2) readonly rdb('wwan.0.system_network_status.current_band', 0, 0, 256, null, '');
//#				param ConnectionBearer string notify(0,0,2) readonly rdb('', 0, 0, 256, null, '');
//#				param EcIo string notify(0,0,2) readonly rdb('', 0, 0, 256, null, '');
				param SignalStrength string notify(0,0,2) readonly rdb('wwan.0.radio.information.signal_strength', 0, 0, 256, null, '');
				param MCC_MNC string notify(0,0,2) readonly dynamic('wireless3g', '');
//#				param APN string notify(0,0,2) readonly rdb('', 0, 0, 256, null, '');
				param SIMStatus string notify(0,0,2) readonly rdb('wwan.0.sim.status.status', 0, 0, 256, null, '');
//				param NetworkLock bool notify(0,0,2) readwrite rdb('', 0, 0, 256, null, "");
				param ConnectionUpTime uint notify(0,0,1) readonly dynamic('wireless3g', '');
			};
		};

		object WWANProfile {
			param ActivatedAPN uint notify(0,0,2) readwrite dynamic('wireless3g', "");
			param AutoAPN bool notify(0,0,2) readwrite dynamic('wireless3g', "0");

			collection APNLists dynamic('wireless3g', "0") {
				default {
					param ProfileName string notify(0,0,2) readwrite dynamic('wireless3g', "");
//					param ConnectionType string notify(0,0,2) readwrite dynamic('wireless3g', "");
// not support anymore					param DialNum string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param APN string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param AuthenticationType string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param UserName string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param Password string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param ReconnectDelay uint notify(0,0,2) readwrite dynamic('wireless3g', "");
					param ReconnectRetries uint notify(0,0,2) readwrite dynamic('wireless3g', "");
					param InterfaceMetric uint notify(0,0,2) readwrite dynamic('wireless3g', "");
					param NATMasquerading bool notify(0,0,2) readonly dynamic('wireless3g', "");
				};
			};
		};
	};
};

// END: Do Not delete this line
