/* Warning on comment.
 1. C-languange style comments are taken out in preprocessing stage.
 2. If you want to leave a comment, use "#" character that is a comment character in the configuration file parser in TR069 client.
 3. Do not use "#" as a leading character in each line. This could cause compilation failure. In this case, use "##".
*/

#define BAR(x) #x
#define QUOTE(x) BAR(x)

object InternetGatewayDevice {
	param DeviceSummary string notify(0,0,3) readonly const("InternetGatewayDevice:1.1[](Baseline:1)");

	object DeviceInfo {
		param Manufacturer string notify(0,0,2) readonly const("NetComm Wireless Limited");
		param ManufacturerOUI string notify(0,0,2) readonly rdb("systeminfo.oui", 1, 0, 64, null, "006064");
		param ModelName string notify(0,0,2) readonly rdb("system.product.model", 1, 0, 64, null, QUOTE(_V_PRODUCT_));
		param Description string notify(0,0,2) readonly rdb("system.product.title", 1, 0, 256, null, QUOTE(_V_IDENTITY_));
		param ProductClass string notify(0,0,2) readonly rdb("system.product.class", 1, 0, 64, null, QUOTE(_V_CLASS_));
		param SerialNumber string notify(0,0,2) readonly rdb("systeminfo.serialnumber", 1, 0, 64, null, "");
		param HardwareVersion string notify(0,0,3) readonly rdb("uboot.hw_ver", 1, 0, 64, null, "N/A");
		param SoftwareVersion string notify(2,2,3) readonly rdb("sw.version", 1, 0, 64, null, "N/A");
		param ModemFirmwareVersion string notify(0,0,2) readonly rdb("wwan.0.firmware_version", 0, 0, 64, null, "N/A");
		param SpecVersion string notify(0,0,3) readonly const("1.0");
		param ProvisioningCode string notify(2,2,3) readwrite rdb("tr069.state.provisioning_code", 1, 0, 64, null, "");
		param UpTime uint notify(0,0,2) readonly dynamic('time', 0); # NTP time handler also supports UpTime
 		param DeviceLog string notify(0,0,1) readonly dynamic('management', "");
	};

	object ManagementServer {
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://rdm.nwas.nbnco.net.au:38080/tr069devicemanagement/tr069webservice");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://qanetcomm.acslite.com/cpe.php");
		param URL string notify(2,2,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://192.168.0.41/acs/cwmp.php");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://10.100.1.1/acs/cwmp.php");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://192.121.199.178:38080/tr069devicemanagement/tr069webservice");
		param Username string notify(0,0,2) readwrite rdb("tr069.server.username", 1, 0, 256, null, "cpe");
		param Password string notify(0,0,2) writeonly rdb("tr069.server.password", 1, 0, 256, null, "cpe");
		param CWMPRetryMinimumWaitInterval uint notify(0,0,2) readwrite rdb("tr069.server.retry.minimum", 1, 5, null, null, 5);
		param CWMPRetryIntervalMultiplier uint notify(0,0,2) readwrite rdb("tr069.server.retry.multiplier", 1, 0, null, null, 2000);
//		param Password uint notify(0,0,2) writeonly rdb("tr069.server.retry_minimum", 1, 0, 256, null, 5);
		param PeriodicInformEnable bool notify(0,0,2) readwrite rdb("tr069.server.periodic.enable", 1, null, null, null, 1);
		param PeriodicInformInterval uint notify(0,0,2) readwrite rdb("tr069.server.periodic.interval", 1, 1, null, null, 60);
		param PeriodicInformTime datetime notify(0,0,2) readwrite rdb("tr069.server.periodic.time", 1, null, null, null, 0);
		param ParameterKey string notify(0,0,3) readwrite rdb("tr069.server.paramkey", 1, 0, 32, null, "");
		param ConnectionRequestURL string notify(2,0,3) readonly dynamic('management', "");
		param ConnectionRequestUsername string notify(0,0,2) readwrite rdb("tr069.request.username", 1, 0, 256, null, "acs");
		param ConnectionRequestPassword string notify(0,0,2) writeonly rdb("tr069.request.password", 1, 0, 256, null, "acs");
		param UpgradesManaged bool notify(0,0,2) readwrite rdb("tr069.server.upgrades_managed", 1, null, null, null, 0);
	};

	object Layer3Forwarding {
		param DefaultConnectionService string notify(0,0,2) readonly const("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1");
		param ForwardNumberOfEntries uint notify(0,0,2) readonly dynamic('layer3Forwarding', 0);
		collection Forwarding dynamic('layer3Forwarding', "") {
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('layer3Forwarding', 0);
				param Status string notify(0,0,2) readwrite dynamic('layer3Forwarding', "Disabled");
				param Type string notify(0,0,2) readwrite dynamic('layer3Forwarding', "Host");
				param DestIPAddress string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param DestSubnetMask string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param SourceIPAddress string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param SourceSubnetMask string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param ForwardingPolicy int notify(0,0,2) readwrite dynamic('layer3Forwarding', -1);
				param GatewayIPAddress string notify(0,0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param Interface string notify(0,0,2) readwrite dynamic('layer3Forwarding', "");
				param ForwardingMetric int notify(0,0,2) readwrite dynamic('layer3Forwarding', 0);
				param MTU uint notify(0,0,2) readwrite dynamic('layer3Forwarding', 1500);
			};
		};
	};

	object LANConfigSecurity {
		param ConfigPassword string notify(0,0,2) writeonly rdb("admin.user.root", 1, 0, 64, null, "");
		param X_NETCOMM_AdminAccountConfigPassword string notify(0,0,2) writeonly rdb("admin.user.admin", 1, 0, 64, null, "");
	};

	param LANDeviceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', "0");
	collection LANDevice const("") {
		object 1 {
			object LANHostConfigManagement {
				param MACAddress string notify(0,0,2) readonly rdb("systeminfo.mac.eth0", 1, null, null, null, "00:00:00:00:00:00");
				param DHCPServerEnable bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "1");
				param DHCPRelay bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "0");
				param X_NETCOMM_DHCPRelayAddr string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");  ## DHCP Relay Server address
				param MinAddress string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
				param MaxAddress string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
				param ReservedAddresses string notify(0,0,2) readonly dynamic('lanDevice_HostConf', "");  ## Comma-separated list of reserved addresses
				param SubnetMask string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "255.255.255.0");
				param DNSServers string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");  ## Comma-separated list of at most two DNS servers offered to DHCP clients. Not to set specific DNS address, leave the address empty or set to "0.0.0.0"
				param DomainName string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
				param IPRouters string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");  ## Support only one gateway address (Currently LAN IP is used as a gatway address, so the value applied to this parameter is also applied to the LAN IP address of a router)
				param DHCPLeaseTime int notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "86400");  ## -1(infinite lease) does not support.

				param IPInterfaceNumberOfEntries uint notify(0,0,2) readonly const("1");
				collection IPInterface const("") {
					object 1 {
						param Enable bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "1");
						param IPInterfaceIPAddress string notify(0,0,2) readwrite rdb("link.profile.0.address", 1, null, null, null, "192.168.20.1");
						param IPInterfaceSubnetMask string notify(0,0,2) readwrite rdb("link.profile.0.netmask", 1, null, null, null, "255.255.255.0");
						param IPInterfaceAddressingType string notify(0,0,2) readonly const("Static"); # Supported only "Static"
					};
				};

				param DHCPStaticAddressNumberOfEntries uint notify(0,0,2) readonly dynamic('lanDevice_HostConf', "");
				collection DHCPStaticAddress dynamic('lanDevice_HostConf', "") {  ## Supported AddObject/DeleteObject methods
					default {
						param Enable bool notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "0");
						param Chaddr string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "00:00:00:00:00:00");  ## Should be "xx:xx:xx:xx:xx:xx"
						param Yiaddr string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "0.0.0.0");
						param X_NETCOMM_ComputerName string notify(0,0,2) readwrite dynamic('lanDevice_HostConf', "");
					};
				};
			};
			param LANEthernetInterfaceNumberOfEntries uint notify(0,0,2) readonly const("0");
			param LANUSBInterfaceNumberOfEntries uint notify(0,0,2) readonly const("0");
			param LANWLANConfigurationNumberOfEntries uint notify(0,0,2) readonly const("0");
			object Hosts {
				param HostNumberOfEntries uint notify(0,0,2) readonly dynamic('dhcp', "0");
				collection Host dynamic('dhcp', "0") {
					default {
						param IPAddress string notify(0,0,2) readonly dynamic('dhcp', "");
						param AddressSource string notify(0,0,2) readonly const("DHCP");
						param LeaseTimeRemaining int notify(0,0,2) readonly dynamic('dhcp', "-1");
						param MACAddress string notify(0,0,2) readonly dynamic('dhcp', "");
						param HostName string notify(0,0,2) readonly dynamic('dhcp', "");
						param InterfaceType string notify(0,0,2) readonly dynamic('dhcp', "");
						param Active bool notify(0,0,2) readonly const("1");
					};
				};
			};
		};
		
	};

	param WANDeviceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', "0");
	collection WANDevice const("") {
		object 1 {  ## This instance number is fixed for Wireless Modem
			param WANConnectionNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");  // Should be dynamic to register clean up handler in inti handler

			object WANCommonInterfaceConfig {
				param EnabledForInternet bool notify(0,0,2) readonly const("1");
				param WANAccessType string notify(0,0,2) readonly const("WirelessModem");
//				param Layer1UpstreamMaxBitRate uint notify(0,0,2) readonly rdb("wwan.0.module.speed.max_up", 0, null, null, null, "5760000");
//				param Layer1DownstreamMaxBitRate uint notify(0,0,2) readonly rdb("wwan.0.module.speed.max_down", 0, null, null, null, "42000000");
				param WANAccessProvider string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "Unknown");
				param PhysicalLinkStatus string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "Unavailable");
				param TotalBytesSent uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param TotalBytesReceived uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param TotalPacketsSent uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param TotalPacketsReceived uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param MaximumActiveConnections uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
				param NumberOfActiveConnections uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");

				collection Connection dynamic('wanDevice_wwan_singlePDP', "") {
					default {
						param ActiveConnectionDeviceContainer string notify(0,0,1) readonly dynamic('wanDevice_wwan_singlePDP', "");
						param ActiveConnectionServiceID string notify(0,0,1) readonly dynamic('wanDevice_wwan_singlePDP', "");
					};
				};
				
			};
			object WANConnectionDevice {
				param WANIPConnectionNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");
				param WANPPPConnectionNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");
				object 1 {
					collection WANIPConnection dynamic('wanDevice_wwan_singlePDP', "") {
						default {
							param Enable bool notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "1");
							param ConnectionStatus string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");
							param PossibleConnectionTypes string notify(0,0,2) readonly const("IP_Routed");
							param ConnectionType string notify(0,0,2) readonly const("IP_Routed");  ## "IP_Routed" only
							param Name string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
							param Uptime uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "0");
							param LastConnectionError string notify(0,0,2) readonly const("ERROR_NONE");
// Bovine doesn't support							param AutoDisconnectTime uint notify(0,0,2) readwrite const("0");
// Bovine doesn't support							param IdleDisconnectTime uint notify(0,0,2) readwrite const("0");
// Bovine doesn't support							param WarnDisconnectDelay uint notify(0,0,2) readwrite const("0");
							param RSIPAvailable bool notify(0,0,2) readonly const("0");
							param NATEnabled bool notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "0");
							param AddressingType string notify(0,0,2) readonly const('DHCP');  ## "DHCP" only

							param ExternalIPAddress string notify(2,0,3) readonly dynamic('wanDevice_wwan_singlePDP', "");  ## does not support write attribute
							param SubnetMask string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");  ## does not support write attribute
							param DefaultGateway string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");

//							param DNSEnabled bool notify(0,0,2) readwrite dynamic('wanDevice', "");
//							param DNSOverrideAllowed bool notify(0,0,2) readwrite dynamic('wanDevice', "");
//							param DNSServers string notify(0,0,2) readwrite dynamic('wanDevice', "");
							param DNSEnabled bool notify(0,0,2) readonly const("1");
							param DNSOverrideAllowed bool notify(0,0,2) readonly const("0");
							param DNSServers string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");

							param MaxMTUSize uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
							param MACAddress string notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', ""); ## does not support write attribute
							param MACAddressOverride bool notify(0,0,2) readonly const("0");
// Bovine doesn't support							param ConnectionTrigger string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
							param RouteProtocolRx string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', ""); ## Default Value: Off, Available Value: Off|RIPv1|RIPv2
//							param PortMappingNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice_wwan_singlePDP', "");

							object X_NETCOMM_APNProfile {
								param ProfileName string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param APN string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param AuthenticationType string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: CHAP, Available Value: CHAP|PAP
								param UserName string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param Password string notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");
								param ReconnectDelay uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: 30, Available Value: 30~65535 (unit: seconds)
								param ReconnectRetries uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: 0, Available Value: 0~65535, 0=Unlimited 
								param InterfaceMetric uint notify(0,0,2) readwrite dynamic('wanDevice_wwan_singlePDP', "");  ## Default Value: 20, Available Value: 0~65535
							};
						};

						param X_NETCOMM_PortMappingNumberOfEntries uint notify(0,0,2) readonly dynamic('wanDevice', "");
						collection X_NETCOMM_PortMapping dynamic('wanDevice', "") {
							default {
								param PortMappingEnabled bool notify(0,0,2) readwrite dynamic('wanDevice', "0");
								param PortMappingLeaseDuration uint notify(0,0,2) readwrite dynamic('wanDevice', "0");
								param RemoteHost string notify(0,0,2) readwrite dynamic('wanDevice', "");
								param ExternalPort uint notify(0,0,2) readwrite dynamic('wanDevice', "10000");
								param ExternalPortEndRange uint notify(0,0,2) readwrite dynamic('wanDevice', "0");
								param InternalPort uint notify(0,0,2) readwrite dynamic('wanDevice', "10000");
								param PortMappingProtocol string notify(0,0,2) readwrite dynamic('wanDevice', "tcp");
								param InternalClient string notify(0,0,2) readwrite dynamic('wanDevice', "");
								param PortMappingDescription string notify(0,0,2) readwrite dynamic('wanDevice', "");
							};
						};
					};
				};
			};
		};
	};

	// Time:2 Profile
	object Time {
		param Enable bool notify(0,0,2) readwrite rdb("service.ntp.enable", 1, null, null, null, 0);
		param NTPServer1 string notify(0,0,2) readwrite rdb("service.ntp.server_address", 1, 0, 64, null, "au.pool.ntp.org");
		param CurrentLocalTime datetime notify(0,0,1) readonly dynamic('time', 0);
		param LocalTimeZone string notify(0,0,2) readwrite dynamic('time', "+00:00");
		param LocalTimeZoneName string notify(0,0,2) readwrite dynamic('time', "UTC0");
		param X_NETCOMM_LTZoneNameList string notify(0,0,0) readonly dynamic('time', "");  ## Extended parameter to list available values on LocalTimeZoneName. Format is "NAME: LocalTimeZoneName;"
	};

	object X_NETCOMM {
		object WirelessModem {
			object Status {
				param IMEI string notify(0,0,2) readonly rdb('wwan.0.imei', 0, 0, 256, null, '');
				param Manufacturer string notify(0,0,2) readonly rdb('wwan.0.manufacture', 0, 0, 256, null, '');
				param HardwareVersion string notify(0,0,2) readonly rdb('wwan.0.hardware_version', 0, 0, 256, null, '');
				param FirmwareVersion string notify(0,0,2) readonly rdb('wwan.0.firmware_version', 0, 0, 256, null, '');
				param Model string notify(0,0,2) readonly dynamic('wireless3g', '');
				param NetworkProvider string notify(0,0,2) readonly dynamic('wireless3g', '');
				param NetworkAttached bool notify(0,0,2) readonly rdb('wwan.0.system_network_status.attached', 0, 0, 256, null, '0');
				param PDPStatus string notify(0,0,2) readonly dynamic('wireless3g', '');
				param LAC_CellID string notify(0,0,2) readonly dynamic('wireless3g', '');
				param ServiceType string notify(0,0,2) readonly rdb('wwan.0.system_network_status.service_type', 0, 0, 256, null, '');
				param CurrentBand string notify(0,0,2) readonly rdb('wwan.0.system_network_status.current_band', 0, 0, 256, null, '');
//#				param ConnectionBearer string notify(0,0,2) readonly rdb('', 0, 0, 256, null, '');
//#				param EcIo string notify(0,0,2) readonly rdb('', 0, 0, 256, null, '');
				param SignalStrength string notify(0,0,2) readonly rdb('wwan.0.radio.information.signal_strength', 0, 0, 256, null, '');
				param MCC_MNC string notify(0,0,2) readonly dynamic('wireless3g', '');
//#				param APN string notify(0,0,2) readonly rdb('', 0, 0, 256, null, '');
				param SIMStatus string notify(0,0,2) readonly rdb('wwan.0.sim.status.status', 0, 0, 256, null, '');
//				param NetworkLock bool notify(0,0,2) readwrite rdb('', 0, 0, 256, null, "");
				param ConnectionUpTime uint notify(0,0,1) readonly dynamic('wireless3g', '');
			};
		};

		object WWANProfile {
			param ActivatedAPN uint notify(0,0,2) readwrite dynamic('wireless3g', "");
			param AutoAPN bool notify(0,0,2) readwrite dynamic('wireless3g', "0");

			collection APNLists dynamic('wireless3g', "0") {
				default {
					param ProfileName string notify(0,0,2) readwrite dynamic('wireless3g', "");
//					param ConnectionType string notify(0,0,2) readwrite dynamic('wireless3g', "");
// not support anymore					param DialNum string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param APN string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param AuthenticationType string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param UserName string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param Password string notify(0,0,2) readwrite dynamic('wireless3g', "");
					param ReconnectDelay uint notify(0,0,2) readwrite dynamic('wireless3g', "");
					param ReconnectRetries uint notify(0,0,2) readwrite dynamic('wireless3g', "");
					param InterfaceMetric uint notify(0,0,2) readwrite dynamic('wireless3g', "");
					param NATMasquerading bool notify(0,0,2) readonly dynamic('wireless3g', "");
				};
			};
		};
	};
};

// END: Do Not delete this line
