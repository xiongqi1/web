/* Warning on comment.
 1. C-languange style comments are taken out in preprocessing stage.
 2. If you want to leave a comment, use "#" character that is a comment character in the configuration file parser in TR069 client.
 3. Do not use "#" as a leading character in each line. This could cause compilation failure. In this case, use "##".
*/

#define BAR(x) #x
#define QUOTE(x) BAR(x)

#define FAULT_MGMT_PERSIST      0

object Device {
	param RootDataModelVersion string notify(0,0,3) readonly const("2.11");
	param InterfaceStackNumberOfEntries uint notify(0,0,3) readonly const("1");

	object DeviceInfo {
		param DeviceCategory string notify(0,0,2) readonly const("COM_IGD");
		param Manufacturer string notify(0,0,2) readonly const("NetComm Wireless");
		param ManufacturerOUI string notify(0,0,2) readonly rdb("systeminfo.oui", 1, 0, 64, null, "18F145");
		param ModelName string notify(0,0,2) readonly rdb("system.product.model", 1, 0, 64, null, QUOTE(_V_PRODUCT_));
		param Description string notify(0,0,2) readonly rdb("system.product.title", 1, 0, 256, null, QUOTE(_V_IDENTITY_));
		param ProductClass string notify(0,0,2) readonly rdb("system.product.class", 1, 0, 64, null, QUOTE(_V_CLASS_));
		param SerialNumber string notify(0,0,2) readonly rdb("systeminfo.serialnumber", 1, 0, 64, null, "");
		param HardwareVersion string notify(0,0,3) readonly rdb("system.product.hwver", 1, 0, 64, null, "N/A");
		param SoftwareVersion string notify(2,2,3) readonly rdb("sw.version", 1, 0, 64, null, "N/A");
		param AdditionalHardwareVersion string notify(0,0,3) readonly rdb("system.product.addhwver", 1, 0, 64, null, "N/A");
		param AdditionalSoftwareVersion string notify(2,2,3) readonly rdb("sw.addversion", 1, 0, 64, null, "N/A");
		param ProvisioningCode string notify(2,2,3) readwrite rdb("tr069.state.provisioning_code", 1, 0, 64, null, "");
		param UpTime uint notify(0,0,2) readonly dynamic('time', 0); # NTP time handler also supports UpTime
		param FirstUseDate datetime notify(0,0,2) readonly rdb('system.first_use_date', 1, 0, 253402300799, null, 0); ## ntpclient.sh will update the rdb
		param VendorLogFileNumberOfEntries uint notify(0,0,2) readonly const("2");
		collection VendorLogFile const("") { ##readonly
			object 1 { /* informational only */
				param Name string notify(0,0,2) readonly const("full log"); # fixed name only
				param MaximumSize uint notify(0,0,2) readonly const("49152"); # Bytes 16K * 3
				param Persistent bool notify(0,0,2) readonly const("0");
			};
			object 2 { /* informational only */
				param Name string notify(0,0,2) readonly const("error log"); # fixed name only
				param MaximumSize uint notify(0,0,2) readonly const("49152"); # Bytes 16K * 3
				param Persistent bool notify(0,0,2) readonly const("1");
			};
		};
		param ProcessorNumberOfEntries uint notify(0,0,2) readonly const("0");
		param VendorConfigFileNumberOfEntries uint notify(0,0,2) readonly const("0");
		param SupportedDataModelNumberOfEntries uint notify(0,0,2) readonly const("1");
		collection SupportedDataModel const("") { ##readonly
			object 1 {
				param URL string notify(0,0,2) readonly const("http://localhost/tr069_sdm_1.xml"); ## the URL of the device type xml
				param URN string notify(0,0,2) readonly const("urn:broadband-forum-org:tr-181-2-11-0"); ## the URN of the data model instance that defines the root object
				param Features string notify(0,0,2) readonly const(""); ## features as specified by the device type instance
			};
		};
                param X_NETCOMM_RebootReason string notify(1,1,3) readonly dynamic('management', "");
	};

	object ManagementServer {
		param EnableCWMP bool notify(0,0,2) readonly rdb("service.tr069.enable", 1, null, null, null, 1);
		param URL string notify(2,2,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "https://192.168.1.2/acs/cwmp.php");
		param Username string notify(0,0,2) readwrite rdb("tr069.server.username", 1, 0, 256, null, "admin");
		param Password string notify(0,0,2) writeonly rdb("tr069.server.password", 1, 0, 256, null, "admin");
		param CWMPRetryMinimumWaitInterval uint notify(0,0,2) readwrite rdb("tr069.server.retry.minimum", 1, 5, null, null, 5);
		param CWMPRetryIntervalMultiplier uint notify(0,0,2) readwrite rdb("tr069.server.retry.multiplier", 1, 0, null, null, 2000);
		param PeriodicInformEnable bool notify(0,0,2) readwrite rdb("tr069.server.periodic.enable", 1, null, null, null, 1);
		param PeriodicInformInterval uint notify(0,0,2) readwrite rdb("tr069.server.periodic.interval", 1, 1, null, null, 60);
		param PeriodicInformTime datetime notify(0,0,2) readwrite rdb("tr069.server.periodic.time", 1, null, null, null, 0);
		param ParameterKey string notify(0,0,3) readwrite rdb("tr069.server.paramkey", 1, 0, 32, null, "");
		param ConnectionRequestURL string notify(2,0,3) readonly dynamic('management', "");
		param ConnectionRequestUsername string notify(0,0,2) readwrite rdb("tr069.request.username", 1, 0, 256, null, "acs");
		param ConnectionRequestPassword string notify(0,0,2) writeonly rdb("tr069.request.password", 1, 0, 256, null, "acs");
		param UpgradesManaged bool notify(0,0,2) readwrite rdb("tr069.server.upgrades_managed", 1, null, null, null, 1);
		param SupportedConnReqMethods string notify(0,0,2) readonly const("http");
		param X_NETCOMM_DownloadMaxRequests uint notify(0,0,2) readonly rdb("tr069.download.maxrequests", 1, null, null, null, 10);
		param X_NETCOMM_DownloadTimeout uint notify(0,0,2) readwrite rdb("tr069.download.timeout", 1, 600, null, null, 3600);
	};

        object Ethernet {
                param InterfaceNumberOfEntries uint notify(0,0,2) readonly const(1);
                param RMONStatsNumberOfEntries uint notify(0,0,2) readonly const(1);
                param LinkNumberOfEntries uint notify(0,0,2) readonly const(0);
                collection Interface const("") {
                        object 1 {
                                param Enable bool notify(0,0,2) readwrite dynamic('ethernetDevice', 1);
                                param Status string notify(0,0,2) readonly dynamic('ethernetDevice', ''); ## Up|Down
                                param Name string notify(0,0,2) readonly dynamic('ethernetDevice', '');
                                param LastChange uint notify(0,0,2) readonly dynamic('ethernetDevice', '0');
                                param LowerLayers string notify(0,0,2) readonly const('N/A');
                                param Upstream bool notify(0,0,2) readonly const('0');
                                param MACAddress string notify(0,0,2) readonly dynamic('ethernetDevice', '');
                                param MaxBitRate int notify(0,0,2) readwrite dynamic('ethernetDevice', -1); ## Maximum upstream and downstream PHY bit rate in Mbps -1 for auto, 10, 100 and 1000 Mbps
                                param CurrentBitRate uint notify(0,0,2) readonly dynamic('ethernetDevice', 1000); ## Current upstream and downstream PHY bit rate in Mbps
                                param DuplexMode string notify(0,0,2) readwrite dynamic('ethernetDevice', 'Full'); ## Half|Full|Auto
                                param X_NETCOMM_CurrentDuplexMode string notify(0,0,2) readonly dynamic('ethernetDevice', 'Full'); ## Half|Full
                                param EEEEnable bool notify(0,0,2) readwrite dynamic('ethernetDevice', 1);
                                param EEECapability bool notify(0,0,2) readonly const('1');
                                object Stats {
                                        param BytesSent ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param BytesReceived ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param PacketsSent ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param PacketsReceived ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param ErrorsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param ErrorsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param UnicastPacketsSent ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param UnicastPacketsReceived ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param DiscardPacketsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param DiscardPacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param MulticastPacketsSent ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param MulticastPacketsReceived ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param BroadcastPacketsSent ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param BroadcastPacketsReceived ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                        param UnknownProtoPacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                };
                        };
                };
                collection RMONStats const("") { ##readonly
                        object 1 {
                                param Enable bool notify(0,0,2) readonly const('1');
                                param Status string notify(0,0,2) readonly const('Enabled');
                                param Name string notify(0,0,2) readonly const('Device.Ethernet.RMONStats.1');
                                param Interface string notify(0,0,2) readonly const('Device.Ethernet.Interface.1');
                                param DropEvents uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param Packets ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param BroadcastPackets ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param MulticastPackets ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param CRCErroredPackets uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param UndersizePackets uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
                                param OversizePackets uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				param Packets64Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				param Packets65to127Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				param Packets128to255Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				param Packets256to511Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				param Packets512to1023Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				param Packets1024to1518Bytes ulong notify(0,0,2) readonly dynamic('ethernetDevice', 0);
			};
		};
	};

	object IP {
		param InterfaceNumberOfEntries uint notify(0,0,2) readonly const('1');
		param IPv4Capable bool notify(0,0,2) readonly const("1");
		param IPv6Capable bool notify(0,0,2) readonly const("1");
		param IPv4Enable bool notify(0,0,2) readonly const("1");
		param IPv6Enable bool notify(0,0,2) readonly const("1");
                collection Interface const("") { ##readonly
                        object 1 {
				param Enable bool notify(0,0,2) readwrite dynamic("ipInterface",0);
				param Status string notify(0,0,2) readonly dynamic("ipInterface","");
				param Name string notify(0,0,2) readonly dynamic("ipInterface","");
				param LowerLayers string notify(0,0,2) readonly const("N/A");
				param Type string notify(0,0,2) readonly dynamic("ipInterface","");
				param Reset bool notify(0,0,2) readwrite dynamic("ipInterface",0);
				param IPv4Enable bool notify(0,0,2) readwrite dynamic("ipInterface",1);
				param IPv4AddressNumberOfEntries uint notify(0,0,2) readonly const('1');
				param IPv6Enable bool notify(0,0,2) readwrite dynamic("ipInterface",0);
				param IPv6AddressNumberOfEntries uint notify(0,0,2) readonly const('1');
				collection IPv4Address const("") { ##readonly
				object 1 {
						param Enable bool notify(0,0,2) readwrite dynamic("ipInterface",0);
						param IPAddress string notify(0,0,2) readonly dynamic("ipInterface","");
						param SubnetMask string notify(0,0,2) readonly dynamic("ipInterface","");
						param AddressingType string notify(0,0,2) readonly dynamic("ipInterface","");
						param Status string notify(0,0,2) readonly dynamic("ipInterface","");
					};
				};
                                collection IPv6Address const("") { ##readonly
                                        object 1 {
                                                param Enable bool notify(0,0,2) readwrite dynamic("ipInterface",0);
                                                param IPAddress string notify(0,0,2) readonly dynamic("ipInterface","");
                                                param Origin string notify(0,0,2) readonly dynamic("ipInterface","");
                                                param Prefix string notify(0,0,2) readonly dynamic("ipInterface","");
                                                param Status string notify(0,0,2) readonly dynamic("ipInterface","");
                                        };
                                };
				object Stats {
					param BytesSent ulong notify(0,0,2) readonly dynamic('ipInterface', 0);
					param BytesReceived ulong notify(0,0,2) readonly dynamic('ipInterface', 0);
					param PacketsSent ulong notify(0,0,2) readonly dynamic('ipInterface', 0);
					param PacketsReceived ulong notify(0,0,2) readonly dynamic('ipInterface', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('ipInterface', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('ipInterface', 0);
				};
			};
		};
		object Diagnostics {
			// Download:1 Profile
			param IPv4DownloadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6DownloadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object DownloadDiagnostics {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Completed|Error_xxx
				param Interface string notify(0,0,2) readonly const("Device.IP.Interface.1"); ## path name of an IP-layer interface
				param DownloadURL string notify(0,0,2) readwrite dynamic("tr143", ""); ## must be "http://host/..."
				param DownloadTransports string notify(0,0,2) readonly dynamic("tr143", "HTTP"); ## must be HTTP
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param EthernetPriority uint notify(0,0,2) readwrite dynamic("tr143", 0); ## ethernet priority code, must be 0
				param ROMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## request (GET) time in UTC with microsecond precision
				param BOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## begin of transmission (first packet received) time in UTC with microsecond precision
				param EOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## end of transmission time in UTC with microsecond precision
				param TestBytesReceived uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes received during http transaction including headers between BOMTime and EOMTime
				param TotalBytesReceived uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes received at IP layer on the interface between BOMTime and EOMTime
				param TCPOpenRequestTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open request (SYN) time in UTC with microsecond precision
				param TCPOpenResponseTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open response (ACK) time in UTC with microsecond precision
			};
			// Upload:1 Profile
			param IPv4UploadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6UploadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object UploadDiagnostics {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Completed|Error_xxx
				param Interface string notify(0,0,2) readonly const("Device.IP.Interface.1"); ## path name of an IP-layer interface
				param UploadURL string notify(0,0,2) readwrite dynamic("tr143", ""); ## must be "http://host/..."
				param UploadTransports string notify(0,0,2) readonly dynamic("tr143", "HTTP"); ## must be HTTP
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param EthernetPriority uint notify(0,0,2) readwrite dynamic("tr143", 0); ## ethernet priority code, must be 0
				param ROMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## request (PUT) time in UTC with microsecond precision
				param BOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## begin of transmission (first packet received) time in UTC with microsecond precision
				param EOMTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## end of transmission time in UTC with microsecond precision
				param TestFileLength uint notify(0,0,2) readwrite dynamic("tr143", 0); ## size of the file in bytes to be uploaded to the server
				param TestBytesSent uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes of the test file sent druing http transaction including headers between BOMTime and EOMTime
				param TotalBytesSent uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes sent at IP layer on the interface between BOMTime and EOMTime
				param TCPOpenRequestTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open request (SYN) time in UTC with microsecond precision
				param TCPOpenResponseTime datetime notify(0,0,2) readonly dynamic("tr143", ""); ## TCP socket open response (ACK) time in UTC with microsecond precision
			};
			// IPPing:1 Profile
			param IPv4PingSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6PingSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object IPPing {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Canceled|Complete|Error_xxx
				param Interface string notify(0,0,2) readonly const("Device.IP.Interface.1"); ## path name of an IP-layer interface
				param Host string notify(0,0,2) readwrite dynamic("tr143", ""); ## host name or ip address of the host to ping
				param NumberOfRepetitions uint notify(0,0,2) readwrite dynamic("tr143", 3); ## number of repetitions of the ping test to perform before reporting
				param Timeout uint notify(0,0,2) readwrite dynamic("tr143", 5000); ## timeout in milliseconds
				param DataBlockSize uint notify(0,0,2) readwrite dynamic("tr143", 56); ## size of the data block in bytes to be sent for each ping
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param SuccessCount uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of successful pings
				param FailureCount uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of failed pings
				param AverageResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## average response time in milliseconds
				param MinimumResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## minimum response time in milliseconds
				param MaximumResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## maximum response time in milliseconds
				param AverageResponseTimeDetailed uint notify(0,0,2) readonly dynamic("tr143", 0); ## average response time in microseconds
				param MinimumResponseTimeDetailed uint notify(0,0,2) readonly dynamic("tr143", 0); ## minimum response time in microseconds
				param MaximumResponseTimeDetailed uint notify(0,0,2) readonly dynamic("tr143", 0); ## maximum response time in microseconds
			};
		};
	};

	object FaultMgmt {
		param SupportedAlarmNumberOfEntries uint notify(0,0,2) readonly rdb("tr069.FaultMgmt.SupportedAlarmNumberOfEntries", FAULT_MGMT_PERSIST, 0, null, null, 0);
		param MaxCurrentAlarmEntries uint notify(0,0,2) readonly rdb("tr069.FaultMgmt.MaxCurrentAlarmEntries", FAULT_MGMT_PERSIST, 0, null, null, 0);
		param CurrentAlarmNumberOfEntries uint notify(2,0,2) readonly rdb("tr069.FaultMgmt.CurrentAlarmNumberOfEntries", FAULT_MGMT_PERSIST, 0, null, null, 0);
		param HistoryEventNumberOfEntries uint notify(1,0,2) readonly rdb("tr069.FaultMgmt.HistoryEventNumberOfEntries", FAULT_MGMT_PERSIST, 0, null, null, 1);
		param ExpeditedEventNumberOfEntries uint notify(1,0,2) readonly rdb("tr069.FaultMgmt.ExpeditedEventNumberOfEntries", FAULT_MGMT_PERSIST, 0, null, null, 1);
		param QueuedEventNumberOfEntries uint notify(1,0,2) readonly rdb("tr069.FaultMgmt.QueuedEventNumberOfEntries", FAULT_MGMT_PERSIST, 0, null, null, 1);

		collection SupportedAlarm rdbobj("tr069.FaultMgmt.SupportedAlarm", FAULT_MGMT_PERSIST, "smallestUnused", 0) {
			default {
				param EventType string notify(0,0,1) readonly rdbmem("EventType", 0, 64, null, "");
				param ProbableCause string notify(0,0,1) readonly rdbmem("ProbableCause", 0, 64, null, "");
				param SpecificProblem string notify(0,0,1) readonly rdbmem("SpecificProblem", 0, 128, null, "");
				param PerceivedSeverity string notify(0,0,1) readonly rdbmem("PerceivedSeverity", 0, 32, null, "");
				param ReportingMechanism string notify(0,0,1) readwrite rdbmem("ReportingMechanism", 0, 64, null, "");
			};
		};

		collection CurrentAlarm rdbobj("tr069.FaultMgmt.CurrentAlarm", FAULT_MGMT_PERSIST, "smallestUnused", 0) {
			default {
				param AlarmIdentifier string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AlarmRaisedTime datetime notify(0,0,1) readonly rdbmem("AlarmRaisedTime", 0, 253402300799, null, "");
				param AlarmChangedTime datetime notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param EventType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ProbableCause string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param SpecificProblem string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param PerceivedSeverity string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalText string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalInformation string notify(0,0,1) readonly dynamic('faultMgmt', 0);
			};
		};

		collection HistoryEvent rdbobj("tr069.FaultMgmt.HistoryEvent", FAULT_MGMT_PERSIST, "smallestUnused", 0) {
			default {
				param EventTime datetime notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AlarmIdentifier string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param NotificationType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ManagedObjectInstance string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param EventType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ProbableCause string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param SpecificProblem string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param PerceivedSeverity string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalText string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalInformation string notify(0,0,1) readonly dynamic('faultMgmt', 0);
			};
		};

		collection ExpeditedEvent rdbobj("tr069.FaultMgmt.ExpeditedEvent", FAULT_MGMT_PERSIST, "smallestUnused", 0) {
			default {
				param EventTime datetime notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AlarmIdentifier string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param NotificationType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ManagedObjectInstance string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param EventType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ProbableCause string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param SpecificProblem string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param PerceivedSeverity string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalText string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalInformation string notify(0,0,1) readonly dynamic('faultMgmt', 0);
			};
		};

		collection QueuedEvent rdbobj("tr069.FaultMgmt.QueuedEvent", FAULT_MGMT_PERSIST, "smallestUnused", 0) {
			default {
				param EventTime datetime notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AlarmIdentifier string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param NotificationType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ManagedObjectInstance string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param EventType string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param ProbableCause string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param SpecificProblem string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param PerceivedSeverity string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalText string notify(0,0,1) readonly dynamic('faultMgmt', 0);
				param AdditionalInformation string notify(0,0,1) readonly dynamic('faultMgmt', 0);
			};
		};
	};

	object X_NETCOMM {
		collection SoftwareImage const('') {
			param SoftwareImageNumberOfEntries uint notify(0,0,2) readonly const(2);
			object 1 {
				param Version string notify(0,0,2) readonly dynamic("sw_upgrade", "N/A");
				param Valid bool notify(0,0,2) readonly dynamic("sw_upgrade", 0);
				param Active bool notify(0,0,2) readonly dynamic('sw_upgrade', 0);
				param Committed bool notify(0,0,2) readwrite dynamic('sw_upgrade', 0);
				param BootOnce bool notify(0,0,2) readwrite dynamic('sw_upgrade', 0);
			};
			object 2 {
				param Version string notify(0,0,2) readonly dynamic("sw_upgrade", "N/A");
				param Valid bool notify(0,0,2) readonly dynamic("sw_upgrade", 0);
				param Active bool notify(0,0,2) readonly dynamic('sw_upgrade', 0);
				param Committed bool notify(0,0,2) readwrite dynamic('sw_upgrade', 0);
				param BootOnce bool notify(0,0,2) readwrite dynamic('sw_upgrade', 0);
			};
		};
		object ReversePower {
			param Status string notify(0,0,2) readonly rdb("system.reversepower.status", 0, 0, 64, null, "");
			param LastChange uint notify(0,0,2) readonly dynamic('reversePower', 0);
			param LineVoltage uint notify(0,0,2) readonly rdb("system.reversepower.linevoltage", 0, null, null, null, "0");
			param LineCurrent uint notify(0,0,2) readonly rdb("system.reversepower.linecurrent", 0, null, null, null, "0");
			param Temperature int notify(0,0,2) readonly rdb("system.reversepower.temperature", 0, null, null, null, "0");
		};
	};

	object Security {
		param CertificateNumberOfEntries uint notify(0,0,2) readonly const(1);
		collection Certificate const('') {
			object 1 {
				param Enable bool notify(0,0,2) readonly const('1');
				param LastModif datetime notify(0,0,2) readonly dynamic('security', 0);
				param SerialNumber string notify(0,0,2) readonly dynamic('security', '');
				param Issuer string notify(0,0,2) readonly dynamic('security', '');
				param NotBefore datetime notify(0,0,2) readonly dynamic('security', 0);
				param NotAfter datetime notify(0,0,2) readonly dynamic('security', 0);
				param Subject string notify(0,0,2) readonly dynamic('security', '');
				param SubjectAlt string notify(0,0,2) readonly dynamic('security', '');
				param SignatureAlgorithm string notify(0,0,2) readonly dynamic('security', '');
			};
		};
	};

	object DSL {
		param LineNumberOfEntries uint notify(0,0,2) readonly const(1);
		param ChannelNumberOfEntries uint notify(0,0,2) readonly const(1);
		collection Line const("") {
			object 1 {
				param Enable bool notify(0,0,2) readonly const(1);
				param Status string notify(0,0,2) readonly dynamic('dslDevice', '');
				param Name string notify(0,0,2) readonly const('Device.DSL.Line.1');
				param LastChange uint notify(0,0,2) readonly dynamic('dslDevice', '0');
				param LinkStatus string notify(0,0,2) readonly dynamic('dslDevice', '');
				param StandardsSupported string notify(0,0,2) readonly dynamic('dslDevice', '');
				param StandardUsed string notify(0,0,2) readonly dynamic('dslDevice', '');
				param UpstreamMaxBitRate uint notify(0,0,2) readonly dynamic('dslDevice', '0');
				param DownstreamMaxBitRate uint notify(0,0,2) readonly dynamic('dslDevice', '0');
				param UpstreamNoiseMargin int notify(0,0,2) readonly dynamic('dslDevice', '0');
				param DownstreamNoiseMargin int notify(0,0,2) readonly dynamic('dslDevice', '0');
				param UpstreamPower int notify(0,0,2) readonly dynamic('dslDevice', '0');
				param DownstreamPower int notify(0,0,2) readonly dynamic('dslDevice', '0');

                                object TestParams {
                                        param LATNds string notify(0,0,2) readonly dynamic('dslDevice', '0');
                                        param LATNus string notify(0,0,2) readonly dynamic('dslDevice', '0');
                                        param SATNds string notify(0,0,2) readonly dynamic('dslDevice', '0');
                                        param SATNus string notify(0,0,2) readonly dynamic('dslDevice', '0');
                                };

                                object Stats {
                                        object Total {
                                                param ErroredSecs uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                param SeverelyErroredSecs uint notify(0,0,2) readonly dynamic('dslDevice', '0');
	                                        object X_NETCOMM {
                                                        param FullInits uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                        param FailedFullInits uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                        param ShortInits uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                        param FailedShortInits uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                        param ReInits uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                        param Showtimes uint notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                        param TotalShowtime ulong notify(0,0,2) readonly dynamic('dslDevice', '0');
                                                };
                                        };
                                };
			};
		};

		collection Channel const("") {
			object 1 {
				param Enable bool notify(0,0,2) readonly const(1);
				param Status string notify(0,0,2) readonly dynamic('dslDevice', '');
				param Name string notify(0,0,2) readonly const('Device.DSL.Channel.1');
				param LastChange uint notify(0,0,2) readonly dynamic('dslDevice', '0');
				param LowerLayers string notify(0,0,2) readonly dynamic('dslDevice', '0');
				param UpstreamCurrRate uint notify(0,0,2) readonly dynamic('dslDevice', '0');
				param DownstreamCurrRate uint notify(0,0,2) readonly dynamic('dslDevice', '0');
			};
		};
	};

	object FAST {
		param LineNumberOfEntries uint notify(0,0,2) readonly const(1);
		collection Line const("") {
		        object 1 {
				param Enable bool notify(0,0,2) readonly const(1);
				param Status string notify(0,0,2) readonly dynamic('fastDevice', '');
				param Name string notify(0,0,2) readonly const('Device.FAST.Line.1');
				param LastChange uint notify(0,0,2) readonly dynamic('fastDevice', '0');
				param Upstream bool notify(0,0,2) readonly const('1');
				param LinkStatus string notify(0,0,2) readonly dynamic('fastDevice', '');
				param AllowedProfiles string notify(0,0,2) readonly dynamic('fastDevice', '');
				param CurrentProfile string notify(0,0,2) readonly dynamic('fastDevice', '');
				param UpstreamMaxBitRate uint notify(0,0,2) readonly dynamic('fastDevice', '0');
				param DownstreamMaxBitRate uint notify(0,0,2) readonly dynamic('fastDevice', '0');
				param UpstreamNoiseMargin int notify(0,0,2) readonly dynamic('fastDevice', '0');
				param DownstreamNoiseMargin int notify(0,0,2) readonly dynamic('fastDevice', '0');
				param UpstreamAttenuation int notify(0,0,2) readonly dynamic('fastDevice', '0');
				param DownstreamAttenuation int notify(0,0,2) readonly dynamic('fastDevice', '0');
				param UpstreamPower int notify(0,0,2) readonly dynamic('fastDevice', '0');
				param DownstreamPower int notify(0,0,2) readonly dynamic('fastDevice', '0');

                                object Stats {
                                        object Total {
                                                param ErroredSecs uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                param SeverelyErroredSecs uint notify(0,0,2) readonly dynamic('fastDevice', '0');
	                                        object X_NETCOMM {
                                                        param FullInits uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                        param FailedFullInits uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                        param ShortInits uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                        param FailedShortInits uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                        param ReInits uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                        param Showtimes uint notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                        param TotalShowtime ulong notify(0,0,2) readonly dynamic('fastDevice', '0');
                                                };
                                        };
                                };
		        };
		};

	};

};

// END: Do Not delete this line
