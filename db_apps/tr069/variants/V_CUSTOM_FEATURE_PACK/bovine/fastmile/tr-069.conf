/* Warning on comment.
 1. C-languange style comments are taken out in preprocessing stage.
 2. If you want to leave a comment, use "#" character that is a comment character in the configuration file parser in TR069 client.
 3. Do not use "#" as a leading character in each line. This could cause compilation failure. In this case, use "##".
*/

#define BAR(x) #x
#define QUOTE(x) BAR(x)

/*
 * We have to use the following macro define since all variant specific
 * add/del_*.conf were written with a hardcoded root of InternetGatewayDevice.
 */
#define InternetGatewayDevice Device

object InternetGatewayDevice {
	param RootDataModelVersion string notify(0,0,3) readonly const("2.9");

	object DeviceInfo {
		param Manufacturer string notify(0,0,2) readonly const("NetComm Wireless Limited");
		param ManufacturerOUI string notify(0,0,2) readonly rdb("systeminfo.oui", 1, 0, 64, null, "006064");
//		param ModelName string notify(0,0,2) readonly rdb("system.product.model", 1, 0, 64, null, QUOTE(_V_PRODUCT_));
//		param Description string notify(0,0,2) readonly rdb("system.product.title", 1, 0, 256, null, QUOTE(_V_IDENTITY_));
		param ProductClass string notify(0,0,2) readonly const("ODU"); ## fixed value as per customer
		param SerialNumber string notify(0,0,2) readonly rdb("systeminfo.udid", 0, 0, 64, null, "");
		param HardwareVersion string notify(0,0,3) readonly rdb("uboot.hw_ver", 1, 0, 64, null, "N/A");
		param SoftwareVersion string notify(2,2,3) readonly rdb("sw.version", 1, 0, 64, null, "N/A");
//		param ModemFirmwareVersion string notify(0,0,2) readonly rdb("wwan.0.firmware_version", 0, 0, 64, null, "N/A");
//		param SpecVersion string notify(0,0,3) readonly const("1.0");
//		param ProvisioningCode string notify(2,2,3) readwrite rdb("tr069.state.provisioning_code", 1, 0, 64, null, "");
		param UpTime uint notify(0,0,2) readonly dynamic('time', 0); # NTP time handler also supports UpTime
//		param DeviceLog string notify(0,0,1) readonly dynamic('management', "");
		param FirstUseDate datetime notify(0,0,2) readonly rdb('system.first_use_date', 1, 0, 253402300799, null, 0); ## ntpclient.sh will update the rdb
		param VendorLogFileNumberOfEntries uint notify(0,0,2) readonly const("1");
		collection VendorLogFile const("") { ##readonly
			object 1 { /* informational only */
				param Name string notify(0,0,2) readonly const("syslog"); ## const as specified by customer
				param MaximumSize uint notify(0,0,2) readonly const("0");
				param Persistent bool notify(0,0,2) readonly const("0");
			};
		};
		param SupportedDataModelNumberOfEntries uint notify(0,0,2) readonly const("1");
		collection SupportedDataModel const("") { ##readonly
			object 1 {
				param URL string notify(0,0,2) readonly const("http://localhost/tr069_sdm_1.xml"); ## the URL of the device type xml
				param URN string notify(0,0,2) readonly const("urn:broadband-forum-org:tr-181-2-9-0"); ## the URN of the data model instance that defines the root object
				param Features string notify(0,0,2) readonly const(""); ## features as specified by the device type instance
			};
		};
		object MemoryStatus {
			param Total uint notify(0,0,1) readonly dynamic("memory", 0); ## total RAM in kB
			param Free uint notify(0,0,1) readonly dynamic("memory", 0); ## free RAM in kB
		};
		object ProcessStatus {
			param CPUUsage uint notify(0,0,1) readonly dynamic("memory", 0); ## total cpu usage in percent
			param ProcessNumberOfEntries uint notify(0,0,1) readonly dynamic("memory", 0);
			collection Process const("") { ##readonly
				default {
					param PID uint notify(0,0,1) readonly dynamic("memory", 0); ## process id
					param Command string notify(0,0,1) readonly dynamic("memory", ""); ## command of the process
					param Size uint notify(0,0,1) readonly dynamic("memory", 0); ## memory size occupied by the process in kB
					param Priority uint notify(0,0,1) readonly dynamic("memory", 0); ## process priority 0(high) - 99(low)
					param CPUTime uint notify(0,0,1) readonly dynamic("memory", 0); ## cpu time in ms the process has taken up
					param State string notify(0,0,1) readonly dynamic("memory", ""); ## current state of the process: Running|Sleeping|Stopped|Idle|Uninterruptible|Zombie
				};
			};
		};

	};

	object ManagementServer {
		param EnableCWMP bool notify(0,0,2) readwrite rdb("service.tr069.enable", 1, null, null, null, 1);
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://rdm.nwas.nbnco.net.au:38080/tr069devicemanagement/tr069webservice");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://qanetcomm.acslite.com/cpe.php");
		param URL string notify(2,2,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://192.168.0.41/acs/cwmp.php");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://10.100.1.1/acs/cwmp.php");
//		param URL string notify(0,0,2) readwrite rdb("tr069.server.url", 1, 1, 256, 'URL', "http://192.121.199.178:38080/tr069devicemanagement/tr069webservice");
		param Username string notify(0,0,2) readwrite rdb("tr069.server.username", 1, 0, 256, null, "");
		param Password string notify(0,0,2) writeonly rdb("tr069.server.password", 1, 0, 256, null, "");
//		param CWMPRetryMinimumWaitInterval uint notify(0,0,2) readwrite rdb("tr069.server.retry.minimum", 1, 5, null, null, 5);
//		param CWMPRetryIntervalMultiplier uint notify(0,0,2) readwrite rdb("tr069.server.retry.multiplier", 1, 0, null, null, 2000);
		param PeriodicInformEnable bool notify(0,0,2) readwrite rdb("tr069.server.periodic.enable", 1, null, null, null, 1);
		param PeriodicInformInterval uint notify(0,0,2) readwrite rdb("tr069.server.periodic.interval", 1, 1, null, null, 60);
		param PeriodicInformTime datetime notify(0,0,2) readwrite rdb("tr069.server.periodic.time", 1, null, null, null, 0);
		param ParameterKey string notify(0,0,3) readonly rdb("tr069.server.paramkey", 1, 0, 32, null, "");
		param ConnectionRequestURL string notify(2,0,3) readonly dynamic('management', "");
		param ConnectionRequestUsername string notify(0,0,2) readwrite rdb("tr069.request.username", 1, 0, 256, null, "");
		param ConnectionRequestPassword string notify(0,0,2) writeonly rdb("tr069.request.password", 1, 0, 256, null, "");
		param UpgradesManaged bool notify(0,0,2) readwrite rdb("tr069.server.upgrades_managed", 1, null, null, null, 0);
		param STUNEnable bool notify(0,0,2) readonly const("0"); ## always disabled as per customer requirement
	};

	object Ethernet {
		param InterfaceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 0);
		param LinkNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 0);
		collection Interface const("") { ##readonly
			object 1 {
				param Enable bool notify(0,0,2) readwrite dynamic('ethernetDevice', 1);
				param Status string notify(0,0,2) readonly dynamic('ethernetDevice', ''); ## Up|Down|Unknown
				param Name string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param MACAddress string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param MaxBitRate int notify(0,0,2) readwrite dynamic('ethernetDevice', -1); ## maximum upstream and downstream PHY bit rate in Mbps
				param DuplexMode string notify(0,0,2) readwrite dynamic('ethernetDevice', ''); ## Half|Full|Auto
				object Stats {
					param BytesSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param BytesReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param MulticastPacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				};
			};
		};

		collection Link const("") { ##readonly
			object 1 {
				param Enable bool notify(0,0,2) readwrite dynamic('ethernetDevice', 1);
				param Status string notify(0,0,2) readonly dynamic('ethernetDevice', ''); ## Up|Down|Unknown
				param Name string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param MACAddress string notify(0,0,2) readonly dynamic('ethernetDevice', '');
				param LowerLayers string notify(0,0,2) readwrite dynamic('ethernetDevice', ''); ## path name of the Interface object below this Link object
				object Stats {
					param BytesSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param BytesReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param PacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
					param MulticastPacketsReceived uint notify(0,0,2) readonly dynamic('ethernetDevice', 0);
				};
			};
		};
	};

	object Cellular {
		param RoamingEnabled bool notify(0,0,2) readwrite rdb('roaming.data.en', 1, null, null, null, 0);
		param RoamingStatus string notify(0,0,2) readonly dynamic('cellularDevice', 'Home'); ## Home|Roaming
		param InterfaceNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 1);
		collection Interface dynamic("cellularDevice", "") { ##readonly
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('cellularDevice', 1);
				param Status string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## Up|Down|Unknown
				param Name string notify(0,0,2) readonly dynamic('cellularDevice', '');
				param IMEI string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## IMEI represented as a 15-digit string
				param NetworkInUse string notify(0,0,2) readonly dynamic('cellularDevice', '');
				param CurrentAccessTechnology string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## GPRS|EDGE|UMTS|LTE
//				object USIM {
//					param Status string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## None|Available|Valid|Blocked|Error
//					param MSISDN string notify(0,0,2) readonly dynamic('cellularDevice', ''); ## MSISDN that uniquely identifying a subscription in GSM/UMTS/LTE network
//				};
				object Stats {
					param BytesSent uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param BytesReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param PacketsSent uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param PacketsReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param ErrorsSent uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param ErrorsReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
					param MulticastPacketsReceived uint notify(0,0,2) readonly dynamic('cellularDevice', 0);
				};
			};
		};
		param AccessPointNumberOfEntries uint notify(0,0,2) readonly dynamic('common', 1);
		collection AccessPoint const("") { ##readonly
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('cellularDevice', 0);
				param Interface string notify(0,0,2) readwrite dynamic('cellularDevice', ''); ## path name of the corresponding Cellular.Interface instance
				param APN string notify(0,0,2) readwrite dynamic('cellularDevice', '');
			};
		};

	};

	// Time:1 Profile
	object Time {
		param Enable bool notify(0,0,2) readwrite rdb("service.ntp.enable", 1, null, null, null, 0); ## enable/disable the NTP time client
		param Status string notify(0,0,2) readonly rdb("service.ntp.status", 0, null, null, null, "Disabled"); ## status of time support: Disabled|Unsynchronized|Synchronized|Error_FailedToSynchronize|Error
		param NTPServer1 string notify(0,0,2) readwrite rdb("service.ntp.server_address", 1, 0, 64, null, "au.pool.ntp.org");
		param CurrentLocalTime datetime notify(0,0,1) readonly dynamic('time', 0); ## The current date and time in the CPE's local time zone
		param LocalTimeZone string notify(0,0,2) readwrite dynamic('time', "UTC0"); ## The local time zone encoded according to IEEE 1003.1 (POSIX)
//		param X_NETCOMM_LTZoneNameList string notify(0,0,0) readonly dynamic('time', "");  ## Extended parameter to list available values on LocalTimeZoneName. Format is "NAME: LocalTimeZoneName;"
	};

	// PeriodicStatsBase:1 Profile
	object PeriodicStatistics {
		param MinSampleInterval uint notify(0,0,2) readonly const("0");
		param MaxReportSamples uint notify(0,0,2) readonly const("0");
		param SampleSetNumberOfEntries uint notify(0,0,2) readonly dynamic("common", 0);
		collection SampleSet dynamic('periodicStats', '') {
			default {
				param Enable bool notify(0,0,2) readwrite dynamic('periodicStats', 0); ## enable (1)/disable(0) the whole sample set
				param Name string notify(0,0,2) readwrite dynamic("periodicStats", ""); ## name of the sample set
				param SampleInterval uint notify(0,0,2) readwrite dynamic("periodicStats", 3600); ## sample interval in seconds. default 3600.
				param ReportSamples uint notify(0,0,2) readwrite dynamic("periodicStats", 24); ## number of samples to keep in storage. default 24.
				param ReportStartTime datetime notify(0,0,2) readonly dynamic("periodicStats", ""); ## time when the first stored sample interval starts.
				param ReportEndTime datetime notify(0,0,2) readonly dynamic("periodicStats", ""); ## time when the last stored sample was taken.
				param SampleSeconds string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated values of seconds of each sample
				param ParameterNumberOfEntries uint notify(0,0,2) readonly dynamic("periodicStats", 0);
				collection Parameter dynamic('periodicStats', '') {
					default {
						param Enable bool notify(0,0,2) readwrite dynamic('periodicStats', 0); ## enable (1)/disable(0) the individual parameter
						param Reference string notify(0,0,2) readwrite dynamic("periodicStats", ""); ## path name of the parameter of interest
						param SampleSeconds string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated values of seconds of each sample
						param SuspectData string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated 0-1 values to indicate unreliable data
						param Values string notify(0,0,2) readonly dynamic("periodicStats", ""); ## comma separated values of sample results
					};
				};
			};
		};
	};

	object IP {
		object Diagnostics {
			// Download:1 Profile
			param IPv4DownloadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6DownloadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object DownloadDiagnostics {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Completed|Error_xxx
				param Interface string notify(0,0,2) readwrite dynamic("tr143", ""); ## path name of an IP-layer interface, empty means up to routing policy
				param DownloadURL string notify(0,0,2) readwrite dynamic("tr143", ""); ## must be "http://host/..."
				param DownloadTransports string notify(0,0,2) readonly dynamic("tr143", "HTTP"); ## must be HTTP
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param EthernetPriority uint notify(0,0,2) readwrite dynamic("tr143", 0); ## ethernet priority code, must be 0
				param ROMTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## request (GET) time in UTC with microsecond precision
				param BOMTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## begin of transmission (first packet received) time in UTC with microsecond precision
				param EOMTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## end of transmission time in UTC with microsecond precision
				param TestBytesReceived uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes received during http transaction including headers between BOMTime and EOMTime
				param TotalBytesReceived uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes received at IP layer on the interface between BOMTime and EOMTime
				param TCPOpenRequestTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## TCP socket open request (SYN) time in UTC with microsecond precision
				param TCPOpenResponseTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## TCP socket open response (ACK) time in UTC with microsecond precision
			};
			// Upload:1 Profile
			param IPv4UploadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6UploadDiagnosticsSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object UploadDiagnostics {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Completed|Error_xxx
				param Interface string notify(0,0,2) readwrite dynamic("tr143", ""); ## path name of an IP-layer interface, empty means up to routing policy
				param UploadURL string notify(0,0,2) readwrite dynamic("tr143", ""); ## must be "http://host/..."
				param UploadTransports string notify(0,0,2) readonly dynamic("tr143", "HTTP"); ## must be HTTP
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param EthernetPriority uint notify(0,0,2) readwrite dynamic("tr143", 0); ## ethernet priority code, must be 0
				param ROMTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## request (PUT) time in UTC with microsecond precision
				param BOMTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## begin of transmission (first packet received) time in UTC with microsecond precision
				param EOMTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## end of transmission time in UTC with microsecond precision
				param TestFileLength uint notify(0,0,2) readwrite dynamic("tr143", 0); ## size of the file in bytes to be uploaded to the server
				param TestBytesSent uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes of the test file sent druing http transaction including headers between BOMTime and EOMTime
				param TotalBytesSent uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of bytes sent at IP layer on the interface between BOMTime and EOMTime
				param TCPOpenRequestTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## TCP socket open request (SYN) time in UTC with microsecond precision
				param TCPOpenResponseTime datetime notify(0,0,2) readonly dynamic("tr143", 0); ## TCP socket open response (ACK) time in UTC with microsecond precision
			};
			// IPPing:1 Profile
			param IPv4PingSupported bool notify(0,0,2) readonly dynamic("tr143", 1);
			param IPv6PingSupported bool notify(0,0,2) readonly dynamic("tr143", 0);
			object IPPing {
				param DiagnosticsState string notify(0,0,2) readwrite dynamic("tr143", "None"); ## None|Requested|Canceled|Complete|Error_xxx
				param Interface string notify(0,0,2) readwrite dynamic("tr143", ""); ## path name of an IP-layer interface, empty means up to routing policy
				param Host string notify(0,0,2) readwrite dynamic("tr143", ""); ## host name or ip address of the host to ping
				param NumberOfRepetitions uint notify(0,0,2) readwrite dynamic("tr143", 3); ## number of repetitions of the ping test to perform before reporting
				param Timeout uint notify(0,0,2) readwrite dynamic("tr143", 5000); ## timeout in milliseconds
				param DataBlockSize uint notify(0,0,2) readwrite dynamic("tr143", 56); ## size of the data block in bytes to be sent for each ping
				param DSCP uint notify(0,0,2) readwrite dynamic("tr143", 0); ## DiffServ code point, must be 0
				param SuccessCount uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of successful pings
				param FailureCount uint notify(0,0,2) readonly dynamic("tr143", 0); ## number of failed pings
				param AverageResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## average response time in milliseconds
				param MinimumResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## minimum response time in milliseconds
				param MaximumResponseTime uint notify(0,0,2) readonly dynamic("tr143", 0); ## maximum response time in milliseconds
			};
		};
	};

	object X_NOKIA_COM_LTTH_ODU { ## Nokia LTTH CPE Proprietary object
		object system {
			param state string notify(0,0,2) readonly dynamic("ltth", "0"); ## current odu device state
			param startFailureRootCause string notify(0,0,2) readonly dynamic("ltth", "0"); ## detailed reason why odu startup has failed
			param connectionLosses uint notify(0,0,2) readonly dynamic("ltth", 0); ## the number of times LTE connection has been lost since startup
			param averageCellRSRQ int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of measured 3gpp lte rsrq value
			param averageCellRSRP int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of measured cell rsrp
			param networkUpTime uint notify(0,0,2) readonly dynamic("ltth", 0); ## time since startup lte network has been up
			param networkDownTime uint notify(0,0,2) readonly dynamic("ltth", 0); ## time since startup lte network has been down
			param averageCellCQI int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell CQI
			param averageCellTx_Power_PUCCH int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.Tx_Power_PUCCH added with value 100
			param averageCellSINR int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.SINR
			param averageCellSNR int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.SNR
			param averageCellDL_PRB_Num int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.DL_PRB_Num
			param averageCellPathloss int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.averagePathloss
			param averageCellTx_Power_PUSCH int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.Tx_Power_PUSCH added with value 100
			param averageCellUL_PRB_Num int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.UL_PRB_Num
			param averageCellDL_PDCP_TP int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.DL_PDCP_TP
			param averageCellUL_PDCP_TP int notify(0,0,2) readonly dynamic("ltth", -1); ## sliding 24-h average of cell.UL_PDCP_TP
			param informTrigger string notify(2,2,2) readwrite rdb("ltth.tr069.inform.trigger", 0, 0, 64, null, "0"); ## a dummy parameter for ltthd to trigger an Inform
		};
		object antenna {
			param vAngle int notify(0,0,2) readonly dynamic("ltth", 0); ## antenna current vertical angle value
			param hAngle int notify(0,0,2) readonly dynamic("ltth", 0); ## antenna current horizontal angle value
			param Mode string notify(0,0,2) readonly dynamic("ltth", "0"); ## antenna current beam forming mode
		};
		object cell {
			param Id string notify(0,0,2) readonly dynamic("ltth", "0"); ## current lte cell id
			param RSRP int notify(0,0,2) readonly dynamic("ltth", -1); ## current measured 3gpp lte rsrp value
			param RSRQ int notify(0,0,2) readonly dynamic("ltth", -1); ## current measured 3gpp lte rsrq value
			param CQI int notify(0,0,2) readonly dynamic("ltth", -1); ## current measured 3gpp lte channel quality indicator (CQI) value
			param Tx_Power_PUCCH int notify(0,0,2) readonly dynamic("ltth", -1); ## UL Tx Power, Physical Uplink Control Channel added with value 100
			param Tx_Power_PUSCH int notify(0,0,2) readonly dynamic("ltth", -1); ## UL Tx Power, Physical Uplink Shared Channel added with value 100
			param Pathloss int notify(0,0,2) readonly dynamic("ltth", -1); ## difference in power, between sent by eNB and received by UE
			param SINR int notify(0,0,2) readonly dynamic("ltth", -1); ## signal to noise and interference ratio
			param SNR int notify(0,0,2) readonly dynamic("ltth", -1); ## signal to noise ratio added by 20
			param MCS string notify(0,0,2) readonly dynamic("ltth", "N/A"); ## modulation and coding scheme
			param QPSK_Rate int notify(0,0,2) readonly dynamic("ltth", -1); ## lowest modulation (4-QAM) used time percentage
			param 16_QAM_Rate int notify(0,0,2) readonly dynamic("ltth", -1); ## 16-QAM modulation used time percentage
			param 64_QAM_Rate int notify(0,0,2) readonly dynamic("ltth", -1); ## 64-QAM modulation used time percentage
			param Transmission_mode int notify(0,0,2) readonly dynamic("ltth", -1); ## transmission mode used
			param Transmission_mode1_Rate int notify(0,0,2) readonly dynamic("ltth", -1); ## transmission mode1 used time percentage
			param Transmission_mode2_Rate int notify(0,0,2) readonly dynamic("ltth", -1); ## transmission mode2 used time percentage
			param DL_PRB_Num int notify(0,0,2) readonly dynamic("ltth", -1); ## unit of allocation
			param UL_PRB_Num int notify(0,0,2) readonly dynamic("ltth", -1); ## unit of allocation
			param DL_PDCP_TP int notify(0,0,2) readonly dynamic("ltth", -1); ## downlink packet data convergence protocol throughput
			param UL_PDCP_TP int notify(0,0,2) readonly dynamic("ltth", -1); ## uplink packet data convergence protocol throughput
		};
		object config {
			param antennaFrequency int notify(0,0,2) readonly dynamic("ltth", -1); ## assigned lte frequency in MHz
			param cellId string notify(0,0,2) readonly dynamic("ltth", "0"); ## assigned lte cell id
			param cellSettings string notify(0,0,2) readwrite dynamic("ltth", ""); ## comma-separated set of cellId,hAngle,antennaFrequency,freqChannel,pci,freqId
			param iduUDID string notify(2,0,2) readonly rdb("systeminfo.idu.udid", 0, 0, 256, null, ""); ## comma-separated list of IDU UDIDs connected to the ODU. Empty string if not connected
			param cellPci int notify(0,0,2) readwrite dynamic("ltth", 0); ## physical cell id for the assigned cell
			param instructedTiltAngle int notify(0,0,2) readonly dynamic("ltth", 0); ## the angle the antenna should be manually tilted
			param variantVersionName string notify(0,0,2) readonly dynamic("ltth", ""); ## factory-configured variant version name
		};
		object measurements {
			param badSignal int notify(0,0,2) writeonly dynamic("ltth", 0); ## ltth-c sets this value to 1 if measurement indicated bad signal and to 0 otherwise
		};
		object device {
			param tz string notify(0,0,2) readwrite dynamic("ltth", "UTC"); ## time zone in Olson format
		};
	};
};

// END: Do Not delete this line
