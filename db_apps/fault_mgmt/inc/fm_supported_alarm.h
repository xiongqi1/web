/*
 * fm_supported_alarm.h
 *
 * Copyright (C) 2018 NetComm Wireless Limited.
 *
 * FaultMgmt system SupportedAlarm object handling functions.
 *
 */

#ifndef __FAULT_MGMT_SUPPORTED_ALARM_H__
#define __FAULT_MGMT_SUPPORTED_ALARM_H__

/****************************************************
 *  RDB Definitions
 ****************************************************/
/* The order of parameters of SupportedAlarm is important for correctly loading
 * supported alarms from the config file */
enum SupportedAlarmParameter {
    _flags = 0,
    PerceivedSeverity,
    ReportingMechanism,
    EventType,
    ProbableCause,
    SpecificProblem,
    SupportedAlarmParameterCount,
};

extern const char *ALARM_PARA_NAME[];
#define ALARM_PARA_NAME_DEF         { \
    [_flags]               = "_flags", \
    [PerceivedSeverity]    = "PerceivedSeverity", \
    [ReportingMechanism]   = "ReportingMechanism", \
    [EventType]            = "EventType", \
    [ProbableCause]        = "ProbableCause", \
    [SpecificProblem]      = "SpecificProblem", \
}

extern const int ALARM_PARA_MAX_STR_LEN[];
#define ALARM_PARA_MAX_STR_LEN_DEF  { \
    [_flags]             = 128, \
    [PerceivedSeverity]    = 32, \
    [ReportingMechanism]   = 32, \
    [EventType]            = 64, \
    [ProbableCause]        = 64, \
    [SpecificProblem]      = 128, \
}

typedef struct _supported_alarm_info {
    int id;
    char *parameters[SupportedAlarmParameterCount];
} SupportedAlarmInfo;

#define SEVERITY_OPT_EMPTY            ""
#define SEVERITY_OPT_STAR             "*"
#define SEVERITY_OPT_CRITICAL         "Critical"
#define SEVERITY_OPT_MAJOR            "Major"
#define SEVERITY_OPT_MINOR            "Minor"
#define SEVERITY_OPT_WARNING          "Warning"
#define SEVERITY_OPT_INDETERMINATE    "Indeterminate"

#define REPORT_MECHANISM_OPT_EXPEDITED   "0 Expedited"
#define REPORT_MECHANISM_OPT_QUEUED      "1 Queued"
#define REPORT_MECHANISM_OPT_LOGGED      "2 Logged"
#define REPORT_MECHANISM_OPT_DISABLED    "3 Disabled"


/****************************************************
 *  Implementation Object Definitions
 ****************************************************/
typedef struct _SupportedAlarm
{
    char * _flags;
    char *PerceivedSeverity;
    char *ReportingMechanism;
    char *EventType;
    char *ProbableCause;
    char *SpecificProblem;
    int _event_type_id;
} SupportedAlarm;


/****************************************************
 *  Functions
 ****************************************************/
/**
 * @brief      Adding a supported alarm. This function should only
 *             be called during FaultMgmt system boot up. No more
 *             SupportedAlarm should be added after the boot is done.
 *
 * @param      alarm_info  Info of the SupportedAlarm to be added.
 *
 * @return     >= 0 means successful. The value is the SupportedAlarm type ID.
 *              < 0 means error:
 *                      FAILED_OPEN_RDB
 *                      FAILED_LOCK_RDB
 *                      FAILED_INVALID_PARA
 *                      FAILED_CREATE_OBJECT
 */
int add_supported_alarm(const SupportedAlarmInfo *alarm_info);


/**
 * @brief      Removing a supported alarm. This function should only
 *             be called during FaultMgmt system boot up. No more
 *             SupportedAlarm should be removed after the boot is done.
 *
 * @param      id    The ID of the SupportedAlarm to be removed.
 *
 * @return      = 0 means successful.
 *              < 0 means error:
 *                      FAILED_OPEN_RDB
 *                      FAILED_LOCK_RDB
 *                      FAILED_INVALID_PARA
 */
int remove_supported_alarm(int id);



/**
 * @brief      Get the number of SupportedAlarm.
 *
 * @return     >= 0 means successful. The value is the count.
 *              < 0 means error:
 *                      FAILED_OPEN_RDB
 *                      FAILED_LOCK_RDB
 *                      FAILED_INVALID_PARA
 *                      FAILED_GET_INFO
 */
int get_supported_alarms_count(void);


/**
 * @brief      Allocate lists of SupportedAlarm/SupportedAlarmInfo.
 *
 * @param[OUT] alarms      The SupportedAlarm list
 * @param[OUT] alarm_info  The SupportedAlarmInfo list
 * @param[OUT] count       The count of items in the list
 *
 * @return      = 0 means successful.
 *              < 0 means error:
 *                      FAILED_OPEN_RDB
 *                      FAILED_LOCK_RDB
 *                      FAILED_INVALID_PARA
 *                      FAILED_GET_INFO
 */
int get_supported_alarms(SupportedAlarm **alarms[], SupportedAlarmInfo **alarm_info[], int *count);

/**
 * @brief      Free the list of SupportedAlarms generated by get_supported_alarms.
 *
 * @param      alarms      The SupportedAlarm list
 * @param      alarm_info  The SupportedAlarmInfo list
 * @param      count       The count of items in the list
 *
 * @return      = 0 means successful.
 *             != 0 means error.
 */
int free_supported_alarms(SupportedAlarm **alarms[], SupportedAlarmInfo **alarm_info[], int *count);

#endif // __FAULT_MGMT_SUPPORTED_ALARM_H__
