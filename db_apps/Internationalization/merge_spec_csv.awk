#! /usr/bin/awk -f

# String merge tool:
# 1) Use the String Edit Tool from UIU.html to generate the string_spec_xxx.csv file
# 2) Use command line: . merge_spec_csv.awk string_spec_xxx.csv to merge all the changes to strings.csv.
# 3) The original strings.csv file will be saved to the backup file strings-ddmmyyyy.csv
#

BEGIN {
	if( ARGC != 2 ) {
		print "Parameter Error"ARGC"\nmerge_spec_csv.awk string_spec_xxx*.csv";
		exit (0);
	}
	SPEC_CSV_FILE=ARGV[1];
	if(index(SPEC_CSV_FILE, "string_spec_")==0) {
		print "csv filename ERROR:\nmerge_spec_csv.awk string_spec_xxx*.csv" ARGC;
		exit (0);
	}

	MAIN_CSV_FILE="strings.csv";
	BACKUP_FILE="strings-"strftime("%d%m%Y")".csv";

	FS=";";
	system("mv -f "MAIN_CSV_FILE" "BACKUP_FILE" && touch "MAIN_CSV_FILE);

	fl=split( "en ar fr de it es pt cz nl tw cn jp", language_list, " " );
	cmd = "cat "BACKUP_FILE;
	cmd2 = "cat "SPEC_CSV_FILE;

	newspec=0;
	#read each line from string.csv
	while (cmd | getline) {
		if(NF < 5) {
			printf $0 "\n" >> MAIN_CSV_FILE;
			continue;
		}
		id=$1;

		#spec1=current line spec filed
		spec1=$2==""?" ":$2;

		#if cpec=="", current line is default string (not inclued spec_xxx)
		spec="";

		l=split($2, a, " ");
		for(i=1; i<=l; i++) {
			if(index(a[i], "spec_")>0) {
				spec=a[i];
				break;
			}
		}
		if(spec!="" && index(SPEC_CSV_FILE, spec)==0) {
			#The spec_xxx NOT match
			print $0 >> MAIN_CSV_FILE;
			continue;
		}
		
		for(i=1; i<=fl; i++) {
			str_language_default[i]="";
			str_language_spec[i]="";
			gsub(/%/, "%%", $(i+2));
			if(spec=="") {
				str_language_default[i]=$(i+2);
				str_language_spec[i]=$(i+2);
			}
			if(index(SPEC_CSV_FILE, spec1)>0) {
				str_language_spec[i]=$(i+2);
			}
		}
		# searching SPEC_CSV_FILE
		diff=0;
		while (cmd2 | getline) {
			if(id==$1) {
				l=split($2, a, " ");
				spec2=""
				for(i=1; i<=l; i++) {
					if(index(a[i], "spec_")>0) {
						spec2=a[i];
						break;
					}
				}
				if(spec2=="") {
					print "Error: This csv file is not generated by the String Edit Tool!";
					system("cp -f "BACKUP_FILE" "MAIN_CSV_FILE);
					exit (0);
				}
				if(spec==spec2) {
					# we are not keep the old spec strings.
					diff = -1;
					continue;
				}
				# check any none blank strings are different
				diff = 0;
				for(i=1; i<=fl; i++) {
					if ( $(i+2)!="") {
						if ( (str_language_spec[i]!="") && (str_language_default[i]!=$(i+2)) ) {
							print "id=\""id"\"   \""str_language_spec[i]"\" >>> \""$(i+2)"\"";
							diff++;
						}
						gsub(/%/, "%%", $(i+2));
						str_language_spec[i]=$(i+2);
						if(str_language_default[i]=="") {
							str_language_default[i]=$(i+2);
						}
					}
					#print str_language_spec[i];
				}
				break;
			}
		}
		close (cmd2);
		if ( diff<0 ) {
			# we are not keep the old spec strings.
			continue;
		}
		if(spec1!=spec) {
			printf id";"spec1 >> MAIN_CSV_FILE;
			for(i=1; i<=fl; i++) {
				printf ";"str_language_default[i] >> MAIN_CSV_FILE;
			}
			printf "\n" >> MAIN_CSV_FILE;
		}
		if ( diff>0 || spec1==spec) {
			newspec++;
			printf id";"spec2 >> MAIN_CSV_FILE;
			for(i=1; i<=fl; i++) {
				printf ";"str_language_spec[i] >> MAIN_CSV_FILE;
			}
			printf "\n" >> MAIN_CSV_FILE;
		}
		diff = 0;
	}
	close (cmd);
	if(newspec==0) {
		print "\nNumber of new "spec2" strings are created: "newspec"\n";
		system( "rm -f "BACKUP_FILE );
	}
	else {
		print "\nNumber of new "spec2" strings are created: "newspec"\nThe original file 'strings.csv' has been renamed to '"BACKUP_FILE"'\n";
	}
}
