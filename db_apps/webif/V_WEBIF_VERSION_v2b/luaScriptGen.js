function getGetLuaStatement(mem: PageElement, pObj: PageObject) :string | undefined {
  // This will produce something like one of the following lines
  // o.memberName=getRdb(rdbName)
  // o.memberName=encode(getRdb(rdbName))
  // if authenticated then o.memberName=encode(getRdb(rdbName)) end
  var script: string | undefined;
  if (isFunction(mem.luaGet)) {
    script = mem.luaGet(pObj);
  }
  if (isDefined(script)) {
    if (mem.encode === true) {
      script = "encode(" + script + ")";
    }

    script = "o." + mem.memberName + "=" + script;
    if (mem.authenticatedOnly === true) {
      script = "if authenticated then "+ script + " end";
    }
    return script;
  }
}

function getSetLuaStatement(mem: PageElement, pObj: PageObject) :string | undefined {
  // This will produce something like one of the following lines
  // setRdb(rdbName,o.memberName)
  // v=o.memberName v=decode(v) setRdb(rdbName,v)
  // if authenticated then setRdb(rdbName,o.memberName) end
  if (mem.readOnly === true)
    return;
  var script: string | undefined;
  if (isFunction(mem.luaSet)) {
    script = mem.luaSet(pObj);
  }
  if (isDefined(script)) {

    script = "v=o." + mem.memberName + (mem.encode === true ? " v=decode(v) " : " ")  + script;

    // If this member is the main enabler of the group we do not need to set the rest of the members if disabled
    // Add a break from the repeat until(true) if the group is disabled.
    if (mem.visibilityVar === true) {
      script += " if toBool(v) == false then break end";
    }

    // See if there are some special conditions for when this member needs to be checked
    // conditionForCheck is a lua snippet that goes between if then
    if (mem.conditionsForCheck.length > 0) {
      script = "if " + mem.conditionsForCheck.join(" and ") + " then " + script + " end";
    }

    if (mem.authenticatedOnly === true) {
      script =  "if authenticated then " + script + " end";
    }
    return script;
  }
}

function getValidateLuaStatement(mem){
  // This function returns a lua statement that checks if a member is valid of the form
  // if valid == false then return false, 'this field has error'
  var luaSnippets = [];
  mem.validateLua.forEach(function(snip){
    luaSnippets.push(snip + "==false");
  });
  var luaChecks = " if " + luaSnippets.join(" or ") + " then return false,'oops! '..'" + mem.memberName + "' end";
  if (mem.required === false) {
    luaChecks = " if #v > 0 then" + luaChecks + " end";
  }

  // If this member is the main enabler of the group we do not need to check the rest of the members if disabled
  // Add a successful return if the group is disabled.
  if (mem.visibilityVar === true) {
   luaChecks += " if toBool(v) == false then return true end";
  }

  luaChecks = "v=o." + mem.memberName +
                    (mem.encode === true ? " v = decode(v)" : "") +
                    luaChecks;
  // See if there are some special conditions for when this member needs to be checked
  // conditionForCheck is a lua snippet that goes between if then
  if (mem.conditionsForCheck.length > 0) {
    luaChecks = "if " + mem.conditionsForCheck.join(" and ") + " then " + luaChecks + " end";
  }
  return luaChecks;
}

// generate the lua snippets to get, set and validate functions
function genLuaScripts(pageData: PageDef, outDir: string) {
  pageData.pageObjects.forEach(function(pObj) {
    if (pObj.customLua === true) return; // If it's true then external file in cgi-bin

    var authenticatedOnly = true;
    if (isDefined(pageData.authenticatedOnly)) authenticatedOnly = pageData.authenticatedOnly;
    if (isDefined(pObj.authenticatedOnly)) authenticatedOnly = pObj.authenticatedOnly;
    var luaScript = "-- auto generated by luaScriptGen.js.\n" +
            (typeof pObj.customLua === "object" && isDefined(pObj.customLua.helpers) ? pObj.customLua.helpers.join("\n") + "\n": "") +
            "objHander = {\n"
            + "  pageURL='" + pageData.URL + "',\n"
            + "  authenticatedOnly=" + authenticatedOnly + ",\n";

    var lockRdb = true;
    if (typeof pObj.customLua === "object" && isDefined(pObj.customLua.lockRdb)) lockRdb = pObj.customLua.lockRdb;

    var luaGetScript = ["={}"];
    var luaSetScript = ["local v"];
    var luaValidateScript: string[] = [];
    if (lockRdb) {
      luaGetScript.push("luardb.lock()");
      luaSetScript.push("luardb.lock()");
    }
    // Certain set elements may want to abort setting of others (i.e. enable == false)
    // A repeat..until is necessary to make sure the rdb unlock is executed.
    luaSetScript.push("repeat");
    var members = isDefined(pObj.editMembers) ? pObj.editMembers : pObj.members;
    members.forEach(function(mem){
      var lua: string | undefined;
      if (isDefined(mem.validateLua) && mem.validateLua.length > 0 && mem.readOnly !== true) {
        luaValidateScript.push(getValidateLuaStatement(mem));
      }
      lua = getGetLuaStatement(mem, pObj);
      if (isDefined(lua)) {
        luaGetScript.push(lua);
      }
      lua = getSetLuaStatement(mem, pObj);
      if (isDefined(lua)) {
        luaSetScript.push(lua);
      }
    });

    luaSetScript.push("until(true)");
    if (typeof pObj.customLua === "object") {
      if (isFunction(pObj.customLua.get)) {
        luaGetScript = pObj.customLua.get(luaGetScript);
      }
      if (isFunction(pObj.customLua.set)) {
        luaSetScript = pObj.customLua.set(luaSetScript);
      }
      if (isFunction(pObj.customLua.validate)) {
        luaValidateScript = pObj.customLua.validate(luaValidateScript);
      }
    }
    if (lockRdb) {
      luaGetScript.push("luardb.unlock()");
      luaSetScript.push("luardb.unlock()");
    }

    var luaGetScript_str = ["  get=function(authenticated)", "local o"].concat(luaGetScript, ["return o"]).join("\n    ") + "\n  end";
    var luaSetScript_str = ["  set=function(authenticated,o)"].concat(luaSetScript).join("\n    ") + "\n  end";
    var luaValidateScript_str = ["  validate=function(o)", "local v"].concat( luaValidateScript,["return true"]).join("\n    ") +  "\n  end";
    luaScript += luaGetScript_str + ",\n" + luaValidateScript_str + ",\n" + luaSetScript_str + "\n}\n";
    fs.writeFile(outDir + "obj" + pObj.objName + ".lua", luaScript, function(err) {
      if(err) {
          return console.log(err);
      }
    });
  });
}
