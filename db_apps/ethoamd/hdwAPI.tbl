/* 
 * 
 * Copyright 1997-2011 NComm, Inc.  All rights reserved.
 * 
 * 
 *                     *** Important Notice ***
 *            This notice may not be removed from this file.
 * 
 * The APS, E1, E3, ETHERNET OAM, PRI ISDN, SONET/SDH, SSM, T1/E1 LIU, T1, T3
 * software contained in this file may only be used within a 
 * valid license agreement between your company and NComm, Inc. The license 
 * agreement includes the definition of a PROJECT.
 * 
 * The APS, E1, E3, ETHERNET OAM, PRI ISDN, SONET/SDH, SSM, T1/E1 LIU, T1, T3
 * software is licensed only for the APS, E1, E3, ETHERNET OAM, PRI ISDN,
 * SONET/SDH, SSM, T1/E1 LIU, T1, T3 application 
 * and within the project definition in the license. Any use beyond this 
 * scope is prohibited without executing an additional agreement with 
 * NComm, Inc. Please refer to your license agreement for the definition of 
 * the PROJECT.
 * 
 * This software may be modified for use within the above scope. All 
 * modifications must be clearly marked as non-NComm changes.
 * 
 * If you are in doubt of any of these terms, please contact NComm, Inc. 
 * at sales@ncomm.com. Verification of your company's license agreement 
 * and copies of that agreement also may be obtained from:
 *  
 * NComm, Inc.
 * 130 Route 111  
 * Suite 201
 * Hampstead, NH 03841
 * 603-329-5221 
 * sales@ncomm.com
 * 
 */



/*
 * This file is #included in the TMS Translation Processor.  It is common
 * to both sides of the translation layer code, so it is included in both
 * the User-side compilation, and the Kernel-side compilation.
 */



/*--------------------------------------------------------------------------*/
static _UI32_ hdwSize(TMS_IO_RECORD *recPtr, TMS_API_TABLE *apiPtr)
{
int bytecount;


	bytecount = (int)apiGetSrcVal(recPtr, P4);

	switch (recPtr->fcode) {

	case HDW_PEEKBYTE:
	case HDW_POKEBYTE:
		break;

	case HDW_PEEKWORD:
	case HDW_POKEWORD:
		bytecount *= sizeof(_UI16_);
		break;

	case HDW_PEEKLONG:
	case HDW_POKELONG:
		bytecount *= sizeof(_UI32_);
		break;

	default:
		return(0);
	}

	return((bytecount > MAX_PEEKPOKE_BYTECOUNT) ?
		MAX_PEEKPOKE_BYTECOUNT : bytecount);
}



/*--------------------------------------------------------------------------*/
static TMS_API_TABLE hdwAPITable[] = {
/*
 * prepost   fcode          param paramType sizeType size       fooPtr
 */
{3, HDW_GENERAL,		P1, PCOPY, SZPRM, P2},
{3, HDW_PEEKBYTE,		P2, PPOLL, SZFOO, (UNITYPE)hdwSize},
{3, HDW_PEEKWORD,		P2, PPOLL, SZFOO, (UNITYPE)hdwSize},
{3, HDW_PEEKLONG,		P2, PPOLL, SZFOO, (UNITYPE)hdwSize},
{1, HDW_POKEBYTE,		P2, PCOPY, SZFOO, (UNITYPE)hdwSize},
{1, HDW_POKEWORD,		P2, PCOPY, SZFOO, (UNITYPE)hdwSize},
{1, HDW_POKELONG,		P2, PCOPY, SZFOO, (UNITYPE)hdwSize},

};



/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/

static TMS_API_PACKAGE hdwAPIPackage =
	{0, "XHDW",
	hdwAPITable, (sizeof(hdwAPITable)/sizeof(TMS_API_TABLE)),
	NULL, 0, 0, 0, NULL, NULL};


#undef  HDW_API_PACKAGE
#define HDW_API_PACKAGE		&hdwAPIPackage

