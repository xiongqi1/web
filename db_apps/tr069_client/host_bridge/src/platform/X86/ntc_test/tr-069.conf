object InternetGatewayDevice {
	param DeviceSummary string notify(4,2) readonly const("InternetGatewayDevice:1.1[](Baseline:1)");

	object DeviceInfo {
		param Manufacturer string notify(0,2) readonly const("NetComm Limited");
		param ManufacturerOUI string notify(0,2) readonly const("001D85");
		param ModelName string notify(0,2) readonly persist("system.product.model", 0, "NTC-TEST");
		param Description string notify(0,2) readonly persist("system.product.title", 0, "NetComm Cellular Router");
		param ProductClass string notify(0,2) readonly persist("system.product.class", 0, "NTC-TEST");
		param SerialNumber string notify(0,2) readonly persist("systeminfo.mac.eth0", 0, "");
		param HardwareVersion string notify(4,2) readonly persist("hw.version", 0, "N/A");
		param SoftwareVersion string notify(6,2) readonly persist("sw.version", 0, "N/A");
		param ModemFirmwareVersion string notify(0,2) readonly persist("wwan.0.firmware_version", 0, "N/A");
		param SpecVersion string notify(4,2) readonly const("1.0");
		param ProvisioningCode string notify(6,2) readwrite persist("tr069.state.provisioning_code", 1, "");
		param UpTime uint notify(0,1) readonly dynamic('time', 0); # NTP time handler also supports UpTime
		param DeviceLog string notify(0,1) readonly const("");
	};

	object ManagementServer {
		param URL string notify(0,2) readwrite persist("tr069.server.url", 1, "http://192.168.0.41/acs/cwmp.php");
		param Username string notify(0,2) readwrite persist("tr069.server.username", 1, "admin");
		param Password string notify(0,2) writeonly persist("tr069.server.password", 1, "admin");
		param PeriodicInformEnable bool notify(0,2) writeonly persist("tr069.server.periodic.enable", 1, 1);
		param PeriodicInformInterval uint notify(0,2) readwrite persist("tr069.server.periodic.interval", 1, 60);
		param PeriodicInformTime datetime notify(0,2) readwrite persist("tr069.server.periodic.time", 1, 0);
		param ParameterKey string notify(4,2) readwrite persist("tr069.server.paramkey", 1, "");
		param ConnectionRequestURL string notify(6,2) readonly dynamic('management', "");
#		param ConnectionRequestURL string notify(6,2) readonly const("http://220.233.131.78:10101/acscall");
		param ConnectionRequestUsername string notify(0,2) readwrite persist("tr069.server.request.username", 1, "dps");
		param ConnectionRequestPassword string notify(0,2) writeonly persist("tr069.server.request.password", 1, "dps");
		param UpgradesManaged bool notify(0,2) readwrite persist("tr069.server.upgrades_managed", 1, 0);
	};

	object LANConfigSecurity {
		param ConfigPassword string notify(0,2) writeonly persist("admin.user.admin", 0, "");
	};

	object X_NETCOMM {
		object DebugInterface {
			param Enable bool notify(0,2) readwrite persist("link.profile.0.enable", 0, 0);
			param IPAddress string notify(0,2) readwrite persist("link.profile.0.address", 0, '192.168.0.60');
			param Netmask string notify(0,2) readwrite persist("link.profile.0.netmask", 0, '255.255.255.0');
			param DefaultGateway string notify(0,2) readwrite persist("link.profile.0.defaultgw", 0, '192.168.0.41');
		};
		object Radio {
			param Frequencies string notify(0,2) readwrite persist("wwan.0.earfcn", 0, "38750,38950,39150,39350");
			param ControlAPN string notify(0,2) readwrite persist("link.profile.1.apn", 0, "rdm");
			param DataAPN string notify(0,2) readwrite persist("link.profile.2.apn", 0, "access-seeker");
		};
		collection UNID dynamic('unid', "") {
			default {
				param Enable bool notify(0,2) readwrite dynamic('unid', 0);
				param Status string notify(0,2) readonly dynamic('unid', "Disabled");
				param MaxBitRate string notify(0,2) readwrite dynamic('unid', "Auto");
				param DuplexMode string notify(0,2) readwrite dynamic('unid', "Auto");
				param TaggingMode string notify(0,2) readwrite dynamic('unid', "DefaultMapped");
				object Stats {
					param BytesSent uint notify(0,1) readonly dynamic('unid', 0);
					param BytesReceived uint notify(0,1) readonly dynamic('unid', 0);
					param PacketsSent uint notify(0,1) readonly dynamic('unid', 0);
					param PacketsReceived uint notify(0,1) readonly dynamic('unid', 0);
				};
			};
		};
		collection AVC dynamic('avc', '') {
			default {
				param Enable bool notify(0,2) readwrite dynamic('avc', 0);
				param Status string notify(0,2) readonly dynamic('avc', "Disabled");
				param SmartEdgeAddress string notify(0,2) readwrite dynamic('avc', "0.0.0.0");
				param MPLSTag uint notify(0,2) readwrite dynamic('avc', 0);
				param UNID uint notify(0,2) readwrite dynamic('avc', 0);
				param VID uint notify(0,2) readwrite dynamic('avc', 0);
				param CoS uint notify(0,2) readwrite dynamic('avc', 0);
#				param DefaultTXCoS uint notify(0,2) readwrite dynamic('avc', 0);
#				param DefaultRXCoS uint notify(0,2) readwrite dynamic('avc', 0);
				param PCPToCoS string notify(0,2) readwrite dynamic('avc', "0,1,2,3,4,5,6,7");
				param DSCPToCoS string notify(0,2) readwrite dynamic('avc', "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
				param CoSToEXP string notify(0,2) readwrite dynamic('avc', "0,1,2,3,4,5,6,7");
				param CoSToDSCP string notify(0,2) readwrite dynamic('avc', "0,0,0,16,32,40,0,0");
				param EXPToCoS string notify(0,2) readwrite dynamic('avc', "0,1,2,3,4,5,6,7");
				param CoSToPCP string notify(0,2) readwrite dynamic('avc', "0,1,2,3,4,5,6,7");
				object Stats {
					param BytesSent uint notify(0,1) readonly dynamic('avc', 0);
					param BytesReceived uint notify(0,1) readonly dynamic('avc', 0);
					param PacketsSent uint notify(0,1) readonly dynamic('avc', 0);
					param PacketsReceived uint notify(0,1) readonly dynamic('avc', 0);
				};
			};
		};
		object PSU {
			param OnBattery bool notify(2,2) readonly persist('psu.on_battery', 0, 0);
			param LowBattery bool notify(2,2) readonly persist('psu.low_battery', 0, 0);
			param ReplaceBattery bool notify(1,2) readonly persist('psu.replace_battery', 0, 0);
			param MissingBattery bool notify(1,2) readonly persist('psu.missing_battery', 0, 0);
		};
		
		object Diagnostics {
			object Capabilities {
				param DownloadTransports string notify(0,2) readonly const("HTTP");
				param UploadTransports string notify(0,2) readonly const("HTTP");
			};
			object Download {
				param DiagnosticsState string notify(0,2) readwrite transient("None");
				param SmartEdgeAddress string notify(0,2) readwrite transient("0.0.0.0");
				param MPLSTag uint notify(0,2) readwrite transient(0);
				param CoS uint notify(0,2) readwrite transient(0);
				param CoSToEXP string notify(0,2) readwrite transient("0,1,2,3,4,5,6,7");
				param CoSToDSCP string notify(0,2) readwrite transient("0,0,0,16,32,40,0,0");
				param InterfaceAddress string notify(0,2) readwrite transient("0.0.0.0");
				param InterfaceNetmask string notify(0,2) readwrite transient("0.0.0.0");
				param DownloadURL string notify(0,2) readwrite transient("");
				param ROMTime datetime notify(0,2) readonly transient(0);
				param BOMTime datetime notify(0,2) readonly transient(0);
				param EOMTime datetime notify(0,2) readonly transient(0);
				param TestBytesReceived uint notify(0,2) readonly transient(0);
				param TotalBytesReceived uint notify(0,2) readonly transient(0);
			};
			object Upload {
				param DiagnosticsState string notify(0,2) readwrite transient("None");
				param SmartEdgeAddress string notify(0,2) readwrite transient("0.0.0.0");
				param MPLSTag uint notify(0,2) readwrite transient(0);
				param CoS uint notify(0,2) readwrite transient(0);
				param CoSToEXP string notify(0,2) readwrite transient("0,1,2,3,4,5,6,7");
				param CoSToDSCP string notify(0,2) readwrite transient("0,0,0,16,32,40,0,0");
				param InterfaceAddress string notify(0,2) readwrite transient("0.0.0.0");
				param InterfaceNetmask string notify(0,2) readwrite transient("0.0.0.0");
				param UploadURL string notify(0,2) readwrite transient("");
				param TestFileLength uint notify(0,2) readwrite transient(10);
				param ROMTime datetime notify(0,2) readonly transient(0);
				param BOMTime datetime notify(0,2) readonly transient(0);
				param EOMTime datetime notify(0,2) readonly transient(0);
				param TotalBytesSent uint notify(0,2) readonly transient(0);
			};
			object UDPEcho {
				param DiagnosticsState string notify(0,2) readwrite transient("None");
				param SmartEdgeAddress string notify(0,2) readwrite transient("0.0.0.0");
				param MPLSTag uint notify(0,2) readwrite transient(0);
				param CoS uint notify(0,2) readwrite transient(0);
				param CoSToEXP string notify(0,2) readwrite transient("0,1,2,3,4,5,6,7");
				param CoSToDSCP string notify(0,2) readwrite transient("0,0,0,16,32,40,0,0");
				param InterfaceAddress string notify(0,2) readwrite transient("0.0.0.0");
				param InterfaceNetmask string notify(0,2) readwrite transient("0.0.0.0");
				param ServerAddress string notify(0,2) readwrite transient("0.0.0.0");
				param ServerPort uint notify(0,2) readwrite transient(0);
				param SourcePort uint notify(0,2) readwrite transient(0);
				param PacketCount uint notify(0,2) readwrite transient(0);
				param PacketsSent uint notify(0,2) readonly transient(0);
				param PacketsReceived uint notify(0,2) readonly transient(0);
				param BytesSent uint notify(0,2) readonly transient(0);
				param BytesReceived uint notify(0,2) readonly transient(0);
				collection Echos transient("") {
					default {
						param RequestSequence uint notify(0,2) readonly transient(0);
						param ReplySequence uint notify(0,2) readonly transient(0);
						param RequestReceivedTimestamp uint notify(0,2) readonly transient(0);
						param ReplySentTimestamp uint notify(0,2) readonly transient(0);
						param ReplyFailureCount uint notify(0,2) readonly transient(0);
						param RequestSentTimestamp uint notify(0,2) readonly transient(0);
						param ReplyReceivedTimestamp uint notify(0,2) readonly transient(0);
					};
				};
			};
		};
	};
};
