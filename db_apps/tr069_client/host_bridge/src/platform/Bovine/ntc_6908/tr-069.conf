object InternetGatewayDevice {
	param DeviceSummary string notify(4,2) readonly const("InternetGatewayDevice:1.1[](Baseline:1, EthernetLAN:1, Time:1)");

	# Baseline:1 + EthernetLAN:1 Profile
	object DeviceInfo {
		param Manufacturer string notify(0,2) readonly const("NetComm Limited");
		param ManufacturerOUI string notify(0,2) readonly const("001D85");
		param ModelName string notify(0,2) readonly persist("system.product.model", 0, "NTC-6908");
		param Description string notify(0,2) readonly persist("system.product.title", 0, "NetComm Cellular Router");
		param ProductClass string notify(0,2) readonly persist("system.product.class", 0, "NTC-69xx");
		param SerialNumber string notify(0,2) readonly dynamic('management', "");
		param HardwareVersion string notify(4,2) readonly persist("hw.version", 0, "N/A");
		param SoftwareVersion string notify(6,2) readonly persist("sw.version", 0, "N/A");
		param ModemFirmwareVersion string notify(0,2) readonly persist("wwan.0.firmware_version", 0, "N/A");
		param SpecVersion string notify(4,2) readonly const("1.0");
		param ProvisioningCode string notify(6,2) readwrite persist("tr069.state.provisioning_code", 1, "");
		param UpTime uint notify(0,2) readonly dynamic('time', 0); # NTP time handler also supports UpTime
		param DeviceLog string notify(0,1) readonly const("");
	};

	object ManagementServer {
#		param URL string notify(0,2) readwrite persist("tr069.server.url", 1, "http://192.121.199.178:38080/tr069devicemanagement/tr069webservice");
#		param Username string notify(0,2) readwrite persist("tr069.server.username", 1, "admin");
#		param Password string notify(0,2) writeonly persist("tr069.server.password", 1, "admin");
#		param URL string notify(0,2) readwrite persist("tr069.server.url", 1, "http://test.dimark.com:8080/dps/TR069");
		param URL string notify(0,2) readwrite persist("tr069.server.url", 1, "http://192.168.0.41/acs/cwmp.php");
#		param URL string notify(0,2) readwrite persist("tr069.server.url", 1, "http://96.22.246.66:8080");
#		param URL string notify(0,2) readwrite persist("tr069.server.url", 1, "http://tr069.finepoint.com:8080");
		param Username string notify(0,2) readwrite persist("tr069.server.username", 1, "tr069");
		param Password string notify(0,2) readwrite persist("tr069.server.password", 1, "tr069");
		param PeriodicInformEnable bool notify(0,2) readwrite persist("tr069.server.periodic.enable", 1, 1);
		param PeriodicInformInterval uint notify(0,2) readwrite persist("tr069.server.periodic.interval", 1, 60);
		param PeriodicInformTime datetime notify(0,2) readwrite persist("tr069.server.periodic.time", 1, 0);
		param ParameterKey string notify(4,2) readwrite persist("tr069.server.paramkey", 1, "");  # ????
		param ConnectionRequestURL string notify(6,2) readonly dynamic('management', "");
#		param ConnectionRequestURL string notify(6,2) readonly const("http://192.168.0.60:8082/acscall");
		param ConnectionRequestUsername string notify(0,2) readwrite persist("tr069.server.request.username", 1, "dps");
		param ConnectionRequestPassword string notify(0,2) readwrite persist("tr069.server.request.password", 1, "dps");
		param UpgradesManaged bool notify(0,2) readwrite persist("tr069.server.upgrades_managed", 1, 0);
	};

	object Layer3Forwarding {
		param DefaultConnectionService string notify(0,2) readonly const("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1");
		param ForwardNumberOfEntries uint notify(0,2) readonly dynamic('layer3Forwarding', 0);
		collection Forwarding dynamic('layer3Forwarding', "") {
			default {
				param Enable bool notify(0,2) readwrite dynamic('layer3Forwarding', 0);
				param Status string notify(0,2) readwrite dynamic('layer3Forwarding', "Disabled");
				param Type string notify(0,2) readwrite dynamic('layer3Forwarding', "Host");
				param DestIPAddress string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param DestSubnetMask string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param SourceIPAddress string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param SourceSubnetMask string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param ForwardingPolicy int notify(0,2) readwrite dynamic('layer3Forwarding', -1);
				param GatewayIPAddress string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
				param Interface string notify(0,2) readwrite dynamic('layer3Forwarding', "");
				param ForwardingMetric int notify(0,2) readwrite dynamic('layer3Forwarding', 0);
				param MTU uint notify(0,2) readwrite dynamic('layer3Forwarding', 1500);
			};
		};
	};

	object LANConfigSecurity {
		param ConfigPassword string notify(0,2) writeonly persist("admin.user.admin", 0, "");
	};
	
	param LANDeviceNumberOfEntries uint notify(0,2) readonly const(1);
 	collection LANDevice const("") {
		object 1 {
			object LANHostConfigManagement {
				param MACAddress string notify(0,2) readonly persist("systeminfo.mac.eth0", 0, "");
				param DHCPServerConfigurable bool notify(0,2) readwrite dynamic('dhcp', 1);
				param DHCPServerEnable bool notify(0,2) readwrite dynamic('dhcp', 1);
				param DHCPRelay bool notify(0,2) readonly dynamic('dhcp', 0);
				param MinAddress string notify(0,2) readwrite dynamic('dhcp', "192.168.20.100");
				param MaxAddress string notify(0,2) readwrite dynamic('dhcp', "192.168.20.200");
				param ReservedAddresses string notify(0,2) readonly dynamic('dhcp', ""); # Doesn't support write attribute, because this doesn't match with our WEBUI structure
				param SubnetMask string notify(0,2) readwrite dynamic('dhcp', "255.255.255.0");
				param DNSServers string notify(0,2) readwrite dynamic('dhcp', "192.168.20.1"); # support for 3 minimum required
				param DomainName string notify(0,2) readwrite dynamic('dhcp', "");
				param IPRouters string notify(0,2) readwrite dynamic('dhcp', "192.168.20.1");
				param DHCPLeaseTime int notify(0,2) readwrite dynamic('dhcp', 86400);
				
				param IPInterfaceNumberOfEntries uint notify(0,2) readonly const(1);
				collection IPInterface const("") {
					object 1 {
						param Enable bool notify(0, 2) readwrite persist("link.profile.0.enable", 0, 1);
						param IPInterfaceIPAddress string notify(0,2) readwrite persist("link.profile.0.address", 0, "192.168.20.1");
						param IPInterfaceSubnetMask string notify(0,2) readwrite persist("link.profile.0.netmask", 0, "255.255.255.0");
						param IPInterfaceAddressingType string notify(0,2) readwrite dynamic('lanDevice', "Static"); # deny non-static
					};
				};
			};
			param LANEthernetInterfaceNumberOfEntries uint notify(0,2) readonly const(1);
			collection LANEthernetInterfaceConfig const("") {
				object 1 {
					param Enable bool notify(0,2) readwrite dynamic('lanDevice', 0);
					param Status string notify(0,2) readonly dynamic('lanDevice', "Disabled");
					param Name string notify(0,2) readonly const("eth0");
					param MACAddress string notify(0,2) readonly persist("systeminfo.mac.eth0", 0, "");
					param MaxBitRate string notify(0,2) readwrite dynamic('lanDevice', "Auto");
					param DuplexMode string notify(0,2) readwrite dynamic('lanDevice', "Auto");
					object Stats {
						param BytesSent uint notify(0,2) readonly dynamic('lanDevice', 0);
						param BytesReceived uint notify(0,2) readonly dynamic('lanDevice', 0);
						param PacketsSent uint notify(0,2) readonly dynamic('lanDevice', 0);
						param PacketsReceived uint notify(0,2) readonly dynamic('lanDevice', 0);
					};
				};
			};
			param LANUSBInterfaceNumberOfEntries uint notify(0,2) readonly const(0);
			param LANWLANConfigurationNumberOfEntries uint notify(0,2) readonly const(0);
			object Hosts {
				param HostNumberOfEntries uint notify(0,2) readonly dynamic('dhcp', 1);
				collection Host dynamic('dhcp', 0) {
					default {
						param IPAddress string notify(0,2) readonly dynamic('dhcp', "");
						param AddressSource string notify(0,2) readonly const("DHCP");
						param LeaseTimeRemaining int notify(0,2) readonly dynamic('dhcp', -1);
						param MACAddress string notify(0,2) readonly dynamic('dhcp', "");
						param HostName string notify(0,2) readonly dynamic('dhcp', "");
						param InterfaceType string notify(0,2) readonly dynamic('dhcp', "");
						param Active bool notify(0,2) readonly const(1);
					};
				};
			};
		};
		
	};
	
	param WANDeviceNumberOfEntries int notify(0,2) readonly const("1");
	collection WANDevice const("") {
		param WANConnectionNumberOfEntries uint notify(0,2) readonly const("1");
		object 1 {
			object WANCommonInterfaceConfig {
				param EnabledForInternet bool notify(0,2) readonly const("1");
				param WANAccessType string notify(0,2) readonly const("3G");
				param Layer1UpstreamMaxBitRate uint notify(0,2) readonly persist("wwan.0.module.speed.max_up", 0, 5760000);
				param Layer1DownstreamMaxBitRate uint notify(0,2) readonly persist("wwan.0.module.speed.max_down", 0, 42000000);
				param WANAccessProvider string notify(0,2) readonly persist("wwan.0.service_provider_name", 0, "Unknown");
				param PhysicalLinkStatus string notify(0,2) readonly dynamic('wanDevice', "Unavailable");
				param TotalBytesSent uint notify(0,2) readonly dynamic('wanDevice', "0");
				param TotalBytesReceived uint notify(0,2) readonly dynamic('wanDevice', "0");
				param TotalPacketsSent uint notify(0,2) readonly dynamic('wanDevice', "0");
				param TotalPacketsReceived uint notify(0,2) readonly dynamic('wanDevice', "0");
				param MaximumActiveConnections uint notify(0,2) readonly const("1");
				param NumberOfActiveConnections uint notify(0,2) readonly const("1");

				object Connection {
					object 1 {
						param ActiveConnectionDeviceContainer string notify(0,2) readonly const("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1");
						param ActiveConnectionServiceID string notify(0,2) readonly const("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1");
					};
				};
				
			};
			object WANConnectionDevice {
				param WANIPConnectionNumberOfEntries uint notify(0,2) readonly const(1);
				param WANPPPConnectionNumberOfEntries uint notify(0,2) readonly const(0);
				object 1 {
					collection WANIPConnection const("") {
						object 1 {
							param Enable bool notify(0,2) readwrite dynamic('wanDevice', "1");
							param ConnectionStatus string notify(0,2) readonly dynamic('wanDevice', "");
							param PossibleConnectionTypes string notify(0,2) readonly const("IP_Routed");
							param ConnectionType string notify(0,2) readwrite const("IP_Routed");
							param Name string notify(0,2) readwrite persist("tr069.WANIPConnection.name", 1, "SomeName");
# Bovine doesn't support							param Uptime uint notify(0,2) readonly dynamic('wanDevice', "0");
							param LastConnectionError string notify(0,2) readonly const("ERROR_NONE");
							param AutoDisconnectTime uint notify(0,2) readwrite const(0);
							param IdleDisconnectTime uint notify(0,2) readwrite const(0);
							param WarnDisconnectDelay uint notify(0,2) readwrite const(0);
							param RSIPAvailable bool notify(0,2) readonly const(0);
							param NATEnabled bool notify(0,2) readwrite const(1);
							param AddressingType string notify(0,2) readwrite const('DHCP');

							param ExternalIPAddress string notify(0,2) readwrite dynamic('wanDevice', "");
							param SubnetMask string notify(0,2) readwrite dynamic('wanDevice', "");
							param DefaultGateway string notify(0,2) readwrite dynamic('wanDevice', "");

#							param DNSEnabled bool notify(0,2) readwrite dynamic('wanDevice', "");
#							param DNSOverrideAllowed bool notify(0,2) readwrite dynamic('wanDevice', "");
#							param DNSServers string notify(0,2) readwrite dynamic('wanDevice', "");
							param DNSEnabled bool notify(0,2) readonly const("1");
							param DNSOverrideAllowed bool notify(0,2) readonly const("0");
							param DNSServers string notify(0,2) readonly dynamic('wanDevice', "");

							param MaxMTUSize uint notify(0,2) readwrite dynamic('wanDevice', "");
							param MACAddress string notify(0,2) readwrite dynamic('wanDevice', "");
							param MACAddressOverride bool notify(0,2) readonly const("0");
# Bovine doesn't support							param ConnectionTrigger string notify(0,2) readwrite dynamic('wanDevice', "");
							param RouteProtocolRx string notify(0,2) readwrite dynamic('wanDevice', "");
							param PortMappingNumberOfEntries uint notify(0,2) readwrite dynamic('wanDevice', "");

							collection PortMapping dynamic('wanDevice', "") {
								default {
									param PortMappingEnabled bool notify(0,2) readwrite dynamic('wanDevice', "0");
									param PortMappingLeaseDuration uint notify(0,2) readwrite dynamic('wanDevice', "0");
									param RemoteHost string notify(0,2) readwrite dynamic('wanDevice', "");
									param ExternalPort uint notify(0,2) readwrite dynamic('wanDevice', "10000");
									param ExternalPortEndRange uint notify(0,2) readwrite dynamic('wanDevice', "0");
									param InternalPort uint notify(0,2) readwrite dynamic('wanDevice', "10000");
									param PortMappingProtocol string notify(0,2) readwrite dynamic('wanDevice', "tcp");
									param InternalClient string notify(0,2) readwrite dynamic('wanDevice', "");
									param PortMappingDescription string notify(0,2) readwrite dynamic('wanDevice', "");
								};
							};
						};
					};
				};
			};
		};
	};

	# Time:2 Profile
#	object Time {
#		param Enable bool notify(0,2) readwrite persist("service.ntp.enable", 0, 0);
#		param NTPServer1 string notify(0,2) readwrite persist("service.ntp.server_address", 0, "0.netcomm.pool.ntp.org");
#		param NTPServer2 string notify(0,2) readwrite persist("service.ntp.server_address2", 0, "1.netcomm.pool.ntp.org");
#		param CurrentLocalTime datetime notify(0,1) readonly dynamic('time', 0);
#		param LocalTimeZone string notify(0,2) readonly dynamic('time', "+00:00");
#		param LocalTimeZoneName string notify(0,2) readonly dynamic('time', "UTC");
#	};

#	object IPPingDiagnostics {
#		param DiagnosticsState string notify(0,2) readwrite internal(1, 1000, "None");
#		param Interface string notify(0,2) readwrite transient("");
#		param Host string notify(0,2) readwrite transient("");
#		param NumberOfRepetitions uint notify(0,2) readwrite transient(0);
#		param Timeout uint notify(0,2) readwrite transient(0);
#		param DataBlockSize uint notify(0,2) readwrite transient(0);
#		param DSCP uint notify(0,2) readwrite transient(0);
#		param SuccessCount uint notify(0,2) readonly transient(0);
#		param FailureCount uint notify(0,2) readonly transient(0);
#		param AverageResponseTime uint notify(0,2) readonly transient(0);
#		param MinimumResponseTime uint notify(0,2) readonly transient(0);
#		param MaximumResponseTime uint notify(0,2) readonly transient(0);
#	};
#	object Capabilities {
#		object PerformanceDiagnostic {
#			param DownloadTransports string notify(0,2) readonly const("HTTP");
#			param UploadTransports string notify(0,2) readonly const("HTTP");
#		};
#	};
#	object DownloadDiagnostics {
#		param DiagnosticsState string notify(0,2) readwrite internal(1, 3000, "None");
#		param Interface string notify(0,2) readwrite transient("");
#		param DownloadURL string notify(0,2) readwrite transient("");
#		param DSCP uint notify(0,2) readwrite transient(0);
#		param EthernetPriority uint notify(0,2) readwrite transient(0);
#		param ROMTime datetime notify(0,2) readonly transient(0);
#		param BOMTime datetime notify(0,2) readonly transient(0);
#		param EOMTime datetime notify(0,2) readonly transient(0);
#		param TestBytesReceived uint notify(0,2) readonly transient(0);
#		param TotalBytesReceived uint notify(0,2) readonly transient(0);
#		param TCPOpenRequestTime datetime notify(0,2) readonly transient(0);
#		param TCPOpenResponseTime datetime notify(0,2) readonly transient(0);
#	};
#	object UploadDiagnostics {
#		param DiagnosticsState string notify(0,2) readwrite internal(1, 4000, "None");
#		param Interface string notify(0,2) readwrite transient("");
#		param UploadURL string notify(0,2) readwrite transient("");
#		param DSCP uint notify(0,2) readwrite transient(0);
#		param EthernetPriority uint notify(0,2) readwrite transient(0);
#		param TestFileLength uint notify(0,2) readwrite transient(10);
#		param ROMTime datetime notify(0,2) readonly transient(0);
#		param BOMTime datetime notify(0,2) readonly transient(0);
#		param EOMTime datetime notify(0,2) readonly transient(0);
#		param TotalBytesSent uint notify(0,2) readonly transient(0);
#		param TCPOpenRequestTime datetime notify(0,2) readonly transient(0);
#		param TCPOpenResponseTime datetime notify(0,2) readonly transient(0);
#	};
#	object UDPEchoConfig {
#		param Enable bool notify(0,2) readwrite internal(1, 5000, 0);
#		param Interface string notify(0,2) readwrite transient("");
#		param SourceIPAddress string notify(0,2) readwrite transient("");
#		param UDPPort uint notify(0,2) readwrite transient(64201);
#		param EchoPlusEnabled bool notify(0,2) readwrite transient(0);
#		param EchoPlusSupported bool notify(0,2) readonly transient(0);
#		param PacketsReceived uint notify(0,2) readonly transient(0);
#		param PacketsResponded uint notify(0,2) readonly transient(0);
#		param BytesReceived uint notify(0,2) readonly transient(0);
#		param BytesResponded uint notify(0,2) readonly transient(0);
#		param TimeFirstPacketReceived datetime notify(0,2) readonly transient(0);
#		param TimeLastPacketReceived datetime notify(0,2) readonly transient(0);
#	};

	object X_NETCOMM {
		collection UNID dynamic('unid', '') {
			default {
				param Enable bool notify(0,2) readwrite dynamic('unid', 0);
				param Status string notify(0,2) readonly dynamic('unid', "Disabled");
				param MaxBitRate string notify(0,2) readwrite dynamic('unid', "Auto");
				param DuplexMode string notify(0,2) readwrite dynamic('unid', "Auto");
				param TaggingMode string notify(0,2) readwrite dynamic('unid', "DefaultMapped");
				object Stats {
					param BytesSent uint notify(0,1) readonly dynamic('unid', 0);
					param BytesReceived uint notify(0,1) readonly dynamic('unid', 0);
					param PacketsSent uint notify(0,1) readonly dynamic('unid', 0);
					param PacketsReceived uint notify(0,1) readonly dynamic('unid', 0);
				};
			};
		};
		collection AVC rdbobj('avc', '', "") {
			default {
				param Enable bool notify(0,2) readwrite rdbobj('avc', 'enable', 0);
				param Status string notify(0,2) readonly rdbobj('avc', 'status', "Disabled");
				param SmartEdgeAddress string notify(0,2) readwrite rdbobj('avc', 'peer_address', "0.0.0.0");
				param MPLSTag uint notify(0,2) readwrite rdbobj('avc', 'mpls_tag', 0);
				param UNID uint notify(0,2) readwrite rdbobj('avc', 'unid', 0);
				param VID uint notify(0,2) readwrite rdbobj('avc', 'vid', 0);
				object QoS {
					param TC string notify(0,2) readwrite rdbobj('avc', 'qos.tc', 'TC_4');
					param DSCP uint notify(0,2) readwrite rdbobj('avc', 'qos.dscp', 0);
					param CIR uint notify(0,2) readwrite rdbobj('avc', 'qos.cir', 0);
					param PIR uint notify(0,2) readwrite rdbobj('avc', 'qos.pir', 0);
				};
				object Stats {
					param BytesSent uint notify(0,1) readonly rdbobj('avc', 'stats.tx_bytes', 0);
					param BytesReceived uint notify(0,1) readonly rdbobj('avc', 'stats.rx_bytes', 0);
					param PacketsSent uint notify(0,1) readonly rdbobj('avc', 'stats.tx_packets', 0);
					param PacketsReceived uint notify(0,1) readonly rdbobj('avc', 'stats.rx_packets', 0);
				};
			};
		};
		object PSU {
			param OnBattery bool notify(2,2) readonly persist('psu.on_battery', 0, 0);
			param LowBattery bool notify(2,2) readonly persist('psu.low_battery', 0, 0);
			param ReplaceBattery bool notify(1,2) readonly persist('psu.replace_battery', 0, 0);
			param MissingBattery bool notify(1,2) readonly persist('psu.missing_battery', 0, 0);
		};

		object WirelessModem {
			object Status {
				param IMEI string notify(0,2) readonly persist('wwan.0.imei', 0, '0');
				param Manufacturer string notify(0,2) readonly persist('wwan.0.manufacture', 0, '');
				param HardwareVersion string notify(0,2) readonly persist('wwan.0.hardware_version', 0, '');
				param FirmwareVersion string notify(0,2) readonly persist('wwan.0.firmware_version', 0, '');
				param Model string notify(0,2) readonly persist('wwan.0.model', 0, '');
				param NetworkProvider string notify(0,2) readonly dynamic('wireless3g', '');
				param NetworkAttached bool notify(0,2) readonly persist('wwan.0.system_network_status.attached', 0, '');
				param PDPStatus string notify(0,2) readonly dynamic('wireless3g', '');
				param LAC_CellID string notify(0,2) readonly dynamic('wireless3g', '');
				param ServiceType string notify(0,2) readonly persist('wwan.0.system_network_status.service_type', 0, '');
				param CurrentBand string notify(0,2) readonly persist('wwan.0.system_network_status.current_band', 0, '');
##				param ConnectionBearer string notify(0,2) readonly persist('', 0, '');
##				param EcIo string notify(0,2) readonly persist('', 0, '');
				param SignalStrenth string notify(0,2) readonly persist('wwan.0.radio.information.signal_strength', 0, '');
				param MCC_MNC string notify(0,2) readonly dynamic('wireless3g', '');
##				param APN string notify(0,2) readonly persist('', 0, '');
				param SIMStatus string notify(0,2) readonly persist('wwan.0.sim.status.status', 0, '');
#				param NetworkLock bool notify(0,2) readwrite persist('', 0, "");
				param ConnectionUpTime uint notify(0,1) readonly dynamic('wireless3g', '');
			};
		};
		object WWANProfile {
			param ActivatedAPN uint notify(0,2) readwrite dynamic('wireless3g', "");

			collection APNLists dynamic('wireless3g', "0") {
				default {
					param ProfileName string notify(0,2) readwrite dynamic('wireless3g', "");
#					param ConnectionType string notify(0,2) readwrite dynamic('wireless3g', "");
					param DialNum string notify(0,2) readwrite dynamic('wireless3g', "");
					param APN string notify(0,2) readwrite dynamic('wireless3g', "");
					param AuthenticationType string notify(0,2) readwrite dynamic('wireless3g', "");
					param UserName string notify(0,2) readwrite dynamic('wireless3g', "");
					param Password string notify(0,2) readwrite dynamic('wireless3g', "");
					param ReconnectDelay uint notify(0,2) readwrite dynamic('wireless3g', "");
					param ReconnectRetries uint notify(0,2) readwrite dynamic('wireless3g', "");
					param InterfaceMetric uint notify(0,2) readwrite dynamic('wireless3g', "");
					param NATMasquerading bool notify(0,2) readonly dynamic('wireless3g', "");
				};
			};
		};
	};
};

