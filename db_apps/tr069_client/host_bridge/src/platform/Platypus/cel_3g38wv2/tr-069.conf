object InternetGatewayDevice {
	param DeviceSummary string notify(4,2) readonly const("InternetGatewayDevice:1.1[](Baseline:1, EthernetLAN:1, WiFiLAN:1, Time:1)");

	# Baseline:1 + EthernetLAN:1 Profile
	object DeviceInfo {
		param Manufacturer string notify(0,2) readonly const("NetComm Wireless Limited");
		param ManufacturerOUI string notify(0,1) readonly const("006064");
		param ModelName string notify(0,2) readonly persist("system.product.model", 0, "au-3g38wv2");
		param Description string notify(0,2) readonly persist("system.product.title", 0, "HSPA WiFi N Router With Voice");
		param ProductClass string notify(0,1) readonly persist("system.product.class", 0, "3g38wv Series");
#		param SerialNumber string notify(0,1) readonly persist("systeminfo.mac.eth0", 0, "");
#		param SerialNumber string notify(0,1) readonly persist("wwan.0.imei", 0, "");
		param SerialNumber string notify(0,1) readonly dynamic('management', "");
		param HardwareVersion string notify(4,2) readonly persist("hw.version", 0, "N/A");
		param SoftwareVersion string notify(6,2) readonly persist("sw.version", 0, "N/A");
		param ModemFirmwareVersion string notify(0,2) readonly persist("wwan.0.firmware_version", 0, "N/A");
		param SpecVersion string notify(4,2) readonly const("1.0");
#for version 1.2(TR111)		param SpecVersion string notify(4,2) readonly const("1.2");
		param ProvisioningCode string notify(6,2) readwrite dynamic('management', "");
		param UpTime uint notify(0,2) readonly dynamic('time', 0); # NTP time handler also supports UpTime
#		param DeviceLog string notify(0,1) readonly const("");
	};

	object ManagementServer {
		param URL string notify(0,2) readwrite dynamic('management', "");
		param Username string notify(0,2) readwrite dynamic('management', "tr069");
		param Password string notify(0,2) writeonly dynamic('management', "tr069");
		param PeriodicInformEnable bool notify(0,2) readwrite dynamic('management', 1);
		param PeriodicInformInterval uint notify(0,2) readwrite dynamic('management', 600);
		param PeriodicInformTime datetime notify(0,2) readwrite dynamic('management', "0");
		param ParameterKey string notify(4,1) readwrite persist("tr069.server.paramkey", 1, "");
		param ConnectionRequestURL string notify(6,2) readonly dynamic('management', "");
		param ConnectionRequestUsername string notify(0,2) readwrite dynamic('management', "dps");
		param ConnectionRequestPassword string notify(0,2) readwrite dynamic('management', "dps");
		param UpgradesManaged bool notify(0,2) readwrite persist("tr069.server.upgrades_managed", 1, 0);
## [start] for version 1.2(TR111)
#		param UDPConnectionRequestAddress string notify(2,2) readonly dynamic('management', "");
##		param UDPConnectionRequestAddressNotificationLimit uint notify(0,2) readwrite dynamic('management', "");
#		param STUNEnable bool notify(0,2) readwrite dynamic('management', "");
#		param STUNServerAddress string notify(0,2) readwrite dynamic('management', "");
#		param STUNServerPort uint notify(0,2) readwrite dynamic('management', "");  # unsignedInt [0:65535]
#		param STUNUsername string notify(0,2) readwrite dynamic('management', "");
#		param STUNPassword string notify(0,2) readwrite dynamic('management', "");
#		param STUNMaximumKeepAlivePeriod int notify(0,2) readwrite dynamic('management', ""); # int [-1:]
#		param STUNMinimumKeepAlivePeriod uint notify(0,2) readwrite dynamic('management', "");
#		param NATDetected bool notify(0,2) readonly dynamic('management', "");
##		param ManageableDeviceNumberOfEntries uint notify(0,2) readonly dynamic('management', "");
##		param ManageableDeviceNotificationLimit uint notify(0,2) readwrite dynamic('management', "");
##		collection ManageableDevice dynamic ('management', 0) {
##			default {
##				param ManufacturerOUI string notify(0,2) readonly dynamic('management', "");
##				param SerialNumber string notify(0,2) readonly dynamic('management', "");
##				param ProductClass string notify(0,2) readonly dynamic('management', "");
##			};
#		};
## [end] for version 1.2(TR111)
	};

#	object Layer3Forwarding {
#		param DefaultConnectionService string notify(0,2) readonly const("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1");
#		param ForwardNumberOfEntries uint notify(0,2) readonly dynamic('layer3Forwarding', 0);
#		collection Forwarding dynamic('layer3Forwarding', "") {
#			default {
#				param Enable bool notify(0,2) readwrite dynamic('layer3Forwarding', 0);
#				param Status string notify(0,2) readwrite dynamic('layer3Forwarding', "");
#				param Type string notify(0,2) readwrite dynamic('layer3Forwarding', "");
#				param DestIPAddress string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
#				param DestSubnetMask string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
#				param SourceIPAddress string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
#				param SourceSubnetMask string notify(0,2) readwrite dynamic('layer3Forwarding', "0.0.0.0");
#				param ForwardingPolicy int notify(0,2) readwrite dynamic('layer3Forwarding', -1);
#				param GatewayIPAddress string notify(0,2) readwrite dynamic('layer3Forwarding', "");
#				param Interface string notify(0,2) readwrite dynamic('layer3Forwarding', "");
#				param ForwardingMetric int notify(0,2) readwrite dynamic('layer3Forwarding', 0);
#			};
#		};
#		collection Forwarding transient("") {
#			default {
#				param Enable bool notify(0,2) readwrite transient(0);
#				param Status string notify(0,2) readwrite transient("");
#				param Type string notify(0,2) readwrite transient("");
#				param DestIPAddress string notify(0,2) readwrite transient("0.0.0.0");
#				param DestSubnetMask string notify(0,2) readwrite transient("0.0.0.0");
#				param SourceIPAddress string notify(0,2) readwrite transient("0.0.0.0");
#				param SourceSubnetMask string notify(0,2) readwrite transient("0.0.0.0");
#				param ForwardingPolicy int notify(0,2) readwrite transient(-1);
#				param GatewayIPAddress string notify(0,2) readwrite transient("");
#				param Interface string notify(0,2) readwrite transient("");
#				param ForwardingMetric int notify(0,2) readwrite transient(0);
#			};
#		};
#	};

	object LANConfigSecurity {
		param ConfigPassword string notify(0,2) writeonly dynamic('wireless', "");
	};

	param LANDeviceNumberOfEntries uint notify(0,2) readonly const(1);
	collection LANDevice const("") {
		object 1 {
			object LANHostConfigManagement {
# 1.4				param MACAddress string notify(0,2) readonly persist("systeminfo.mac.eth0", 0, "");
				param DHCPServerConfigurable bool notify(0,2) readwrite dynamic('dhcp', 1);
				param DHCPServerEnable bool notify(0,2) readwrite dynamic('dhcp', 1);
				param DHCPRelay bool notify(0,2) readonly dynamic('dhcp', 0);
				param MinAddress string notify(0,2) readwrite dynamic('dhcp', "192.168.20.100");
				param MaxAddress string notify(0,2) readwrite dynamic('dhcp', "192.168.20.200");
#				param ReservedAddresses string notify(0,2) readwrite dynamic('dhcp', "");
				param SubnetMask string notify(0,2) readwrite dynamic('dhcp', "255.255.255.0");
				param DNSServers string notify(0,2) readwrite dynamic('dhcp', "192.168.20.1"); # support for 3 minimum required
#				param DomainName string notify(0,2) readwrite dynamic('dhcp', "");
				param IPRouters string notify(0,2) readwrite dynamic('dhcp', "192.168.20.1");
				param DHCPLeaseTime int notify(0,2) readwrite dynamic('dhcp', 86400);
#				param AllowedMACAddresses string notify(0,2) readwrite dynamic('dhcp', "");

				param IPInterfaceNumberOfEntries uint notify(0,2) readonly const(1);
				collection IPInterface const("") {
					object 1 {
						param Enable bool notify(0,2) readonly const("1");
						param IPInterfaceIPAddress string notify(0,2) readwrite dynamic('dhcp', "192.168.20.1");
						param IPInterfaceSubnetMask string notify(0,2) readwrite dynamic('dhcp', "255.255.255.0");
						param IPInterfaceAddressingType string notify(0,2) readwrite dynamic('lanDevice', "Static"); # deny non-static
					};
				};
	};
			param LANEthernetInterfaceNumberOfEntries uint notify(0,2) readonly const(1);
			collection LANEthernetInterfaceConfig const("") {
				object 1 {
					param Enable bool notify(0,2) readwrite dynamic('lanDevice', 0);
					param Status string notify(0,2) readonly dynamic('lanDevice', "Disabled");
					param Name string notify(0,2) readonly dynamic('lanDevice', "");
					param MACAddress string notify(0,2) readonly dynamic('lanDevice', "");
					param MaxBitRate string notify(0,2) readonly dynamic('lanDevice', "Auto");
					param DuplexMode string notify(0,2) readonly dynamic('lanDevice', "Auto");
					object Stats {
						param BytesSent uint notify(0,1) readonly dynamic('lanDevice', 0);
						param BytesReceived uint notify(0,1) readonly dynamic('lanDevice', 0);
						param PacketsSent uint notify(0,1) readonly dynamic('lanDevice', 0);
						param PacketsReceived uint notify(0,1) readonly dynamic('lanDevice', 0);
					};
				};
			};
			param LANUSBInterfaceNumberOfEntries uint notify(0,2) readonly const(0);
			param LANWLANConfigurationNumberOfEntries uint notify(0,2) readonly dynamic('wireless', '0');
			collection WLANConfiguration dynamic('wireless', 0) {
				 default {
					  param Enable bool notify(0,2) readwrite dynamic('wireless', "");
					  param Status string notify(0,2) readonly dynamic('wireless', "");
					  param BSSID string notify(0,2) readonly dynamic('wireless', "");
#					  param MaxBitRate string notify(0,2) readwrite dynamic('wireless', "");
					  param Channel uint notify(0,2) readwrite dynamic('wireless', "");
					  param AutoChannelEnable bool notify(0,2) readwrite dynamic('wireless', ""); # Version 1.4
#					  param CurrentChannel uint notify(0,2) readonly dynamic('wireless', "");  # TELUS Only
					  param SSID string notify(0,2) readwrite dynamic('wireless', "");
					  param BeaconType string notify(0,2) readwrite dynamic('wireless', "");
#					  param MACAddressControlEnabled bool notify(0,2) readwrite dynamic('wireless', "");
					  param Standard string notify(0,2) readonly dynamic('wireless', "");
					  param WEPKeyIndex uint notify(0,2) readwrite dynamic('wireless', "");
					  param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
					  param WEPEncryptionLevel string notify(0,2) readonly dynamic('wireless', "");
					  param BasicEncryptionModes string notify(0,2) readwrite dynamic('wireless', "");
					  param BasicAuthenticationMode string notify(0,2) readwrite dynamic('wireless', "");
					  param WPAEncryptionModes string notify(0,2) readwrite dynamic('wireless', "");
					  param WPAAuthenticationMode string notify(0,2) readwrite dynamic('wireless', "");
					  param IEEE11iEncryptionModes string notify(0,2) readwrite dynamic('wireless', "");
					  param IEEE11iAuthenticationMode string notify(0,2) readwrite dynamic('wireless', "");
					  param PossibleChannels string notify(0,2) readonly dynamic('wireless', "");
#					  param BasicDataTransmitRates string notify(0,2) readwrite dynamic('wireless', "");
#					  param OperationalDataTransmitRates string notify(0,2) readwrite dynamic('wireless', "");
#					  param PossibleDataTransmitRates string notify(0,2) readonly dynamic('wireless', "");
					  param BeaconAdvertisementEnabled bool notify(0,2) readwrite dynamic('wireless', 1);
					  param RadioEnabled bool notify(0,2) readwrite dynamic('wireless', 1);
#					  param AutoRateFallBackEnabled bool notify(0,2) readwrite dynamic('wireless', 1);
					  param TotalBytesSent uint notify(0,1) readonly dynamic('wireless', "");
					  param TotalBytesReceived uint notify(0,1) readonly dynamic('wireless', "");
					  param TotalPacketsSent uint notify(0,1) readonly dynamic('wireless', "");
					  param TotalPacketsReceived uint notify(0,1) readonly dynamic('wireless', "");
					  param TotalAssociations uint notify(0,1) readonly dynamic('wireless', "");

					  collection AssociatedDevice dynamic('wireless', 0) {
						default {
							 param AssociatedDeviceMACAddress string notify(0,1) readonly dynamic('wireless', "");
							 param AssociatedDeviceIPAddress string notify(0,1) readonly dynamic('wireless', "");
							 param AssociatedDeviceAuthenticationState bool notify(0,1) readonly dynamic('wireless', "");
						};
					  };

					  collection WEPKey const("") {
						object 1 {
							 param WEPKey string notify(0,2) writeonly dynamic('wireless', "");
						};
						object 2 {
							 param WEPKey string notify(0,2) writeonly dynamic('wireless', "");
						};
						object 3 {
							 param WEPKey string notify(0,2) writeonly dynamic('wireless', "");
						};
						object 4 {
							 param WEPKey string notify(0,2) writeonly dynamic('wireless', "");
						};
					  };

					  collection PreSharedKey const("") {
						object 1 {
							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
						};
#						object 2 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 3 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 4 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 5 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 6 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 7 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 8 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 9 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
#						object 10 {
#							 param PreSharedKey string notify(0,2) readwrite dynamic('wireless', "");
#							 param KeyPassphrase string notify(0,2) writeonly dynamic('wireless', "");
#						};
					  };
				 };
			};
			object Hosts {
				param HostNumberOfEntries uint notify(0,2) readonly dynamic('dhcp', 1);
				collection Host dynamic('dhcp', 0) {
					default {
						param IPAddress string notify(0,2) readonly dynamic('dhcp', "");
						param AddressSource string notify(0,2) readonly dynamic('dhcp', "");
						param LeaseTimeRemaining int notify(0,2) readonly dynamic('dhcp', -1);
						param MACAddress string notify(0,2) readonly dynamic('dhcp', "");
						param HostName string notify(0,2) readonly dynamic('dhcp', "");
						param InterfaceType string notify(0,2) readonly dynamic('dhcp', "");
						param Active bool notify(0,2) readonly const(1);
					};
				};
			};
		};

	};

	param WANDeviceNumberOfEntries int notify(0,2) readonly const(1);
	collection WANDevice const("") {
		object 1 {
			object WANCommonInterfaceConfig {
				param EnabledForInternet bool notify(0,2) readonly const(1);
				param WANAccessType string notify(0,2) readonly const("Ethernet");
				param Layer1UpstreamMaxBitRate uint notify(0,2) readonly const("100000000");
				param Layer1DownstreamMaxBitRate uint notify(0,2) readonly const("100000000");
#				param WANAccessProvider string notify(0,2) readonly const("Unknown");
				param PhysicalLinkStatus string notify(0,2) readonly dynamic('wanDevice', "Unavailable");
				param TotalBytesSent uint notify(0,2) readonly dynamic('wanDevice', 0);
				param TotalBytesReceived uint notify(0,2) readonly dynamic('wanDevice', 0);
				param TotalPacketsSent uint notify(0,2) readonly dynamic('wanDevice', 0);
				param TotalPacketsReceived uint notify(0,2) readonly dynamic('wanDevice', 0);

			};
			object WANConnectionDevice {
				param WANIPConnectionNumberOfEntries uint notify(0,2) readonly const(1);
				param WANPPPConnectionNumberOfEntries uint notify(0,2) readonly const(1);
				object 1 {
					object WANIPConnection {
						object 1 {
							param Enable bool notify(0,2) readwrite const(1);
							param ConnectionStatus string notify(0,2) readonly dynamic('wanDevice', 0);
#							param Uptime uint notify(0,1) readonly dynamic('wanDevice', 0);
#							param LastConnectionError string notify(0,2) readonly const("ERROR_NONE");
							param RSIPAvailable bool notify(0,2) readonly const(0);
							param NATEnabled bool notify(0,2) readwrite dynamic('wanDevice', 0);
							param AddressingType string notify(0,2) readwrite dynamic('wanDevice', 0);
							param ExternalIPAddress string notify(6,2) readwrite dynamic('wanDevice', 0);
							param SubnetMask string notify(0,2) readwrite dynamic('wanDevice', 0);
							param DefaultGateway string notify(0,2) readwrite dynamic('wanDevice', 0);
							param DNSServers string notify(0,2) readwrite dynamic('wanDevice', 0);
							param MaxMTUSize uint notify(0,2) readwrite dynamic('wanDevice', 0);
							param MACAddress string notify(0,2) readonly dynamic('wanDevice', 0);
						};
					};
				};
				object 2 {
					object WANPPPConnection {
						object 1 {
							param Enable bool notify(0,2) readwrite const(1);
							param ConnectionStatus string notify(0,2) readonly dynamic('wanDevice', 0);
							param PossibleConnectionTypes string notify(0,2) readonly const("PPPoE_Bridged,PPTP_Relay");
							param ConnectionType string notify(0,2) readwrite dynamic('wanDevice', 0);
#							param Uptime uint notify(0,1) readonly dynamic('wanDevice', 0);
#							param LastConnectionError string notify(0,2) readonly const("ERROR_NONE");
							param RSIPAvailable bool notify(0,2) readonly const(0);
							param NATEnabled bool notify(0,2) readwrite dynamic('wanDevice', 0);
							param Username string notify(0,2) readwrite dynamic('wanDevice', 0);
							param Password string notify(0,2) writeonly dynamic('wanDevice', 0);
							param ExternalIPAddress string notify(6,2) readonly dynamic('wanDevice', 0);
							param MACAddress string notify(0,2) readonly dynamic('wanDevice', 0);
							param TransportType string notify(0,2) readonly dynamic('wanDevice', 0);
							param ConnectionTrigger string notify(0,2) readwrite dynamic('wanDevice', 0);
						};
					};
				};
			};
		};
	};

	# Time:2 Profile
	object Time {
		param NTPServer1 string notify(0,2) readwrite dynamic('time', "0.netcomm.pool.ntp.org");
		param CurrentLocalTime datetime notify(0,1) readonly dynamic('time', 0);
		param LocalTimeZone string notify(0,2) readwrite dynamic('time', "-10:00");
		param LocalTimeZoneName string notify(0,2) readonly dynamic('time', "AES");
		param DaylightSavingsUsed bool notify(0,2) readwrite dynamic('time', 0);
	};

	# 3G/4G
	object X_NETCOMM_COM {
		object WirelessModem {
			object Status {
				param IMEI string notify(0,2) readonly dynamic('wireless3g', "");
				param Manufacturer string notify(0,2) readonly dynamic('wireless3g', "");
				param HardwareVersion string notify(0,2) readonly dynamic('wireless3g', "");
				param FirmwareVersion string notify(0,2) readonly dynamic('wireless3g', "");
				param Model string notify(0,2) readonly dynamic('wireless3g', "");
				param CurrentNetwork string notify(0,2) readonly dynamic('wireless3g', "");
				param NetworkAttached bool notify(0,2) readonly dynamic('wireless3g', "");
				param PDPStatus string notify(0,2) readonly dynamic('wireless3g', "");
				param CGI string notify(0,2) readonly dynamic('wireless3g', "");
				param Band string notify(0,2) readonly dynamic('wireless3g', "");
#				param ConnectionBearer string notify(0,2) readonly dynamic('wireless3g', "");
#				param EcIo string notify(0,2) readonly dynamic('wireless3g', "");
				param RSCP string notify(0,2) readonly dynamic('wireless3g', "");
				param PLMN string notify(0,2) readonly dynamic('wireless3g', "");
				param APN string notify(0,2) readonly dynamic('wireless3g', "");
#				param Username string notify(0,2) readonly dynamic('wireless3g', "");
#				param Password string notify(0,2) readonly dynamic('wireless3g', "");
				param SIMStatus string notify(0,2) readonly dynamic('wireless3g', "");
#				param NetworkLock bool notify(0,2) readwrite dynamic('wireless3g', "");
#				param ConnectionUpTime uint notify(0,1) readonly dynamic('wireless3g', 0);
			};
			object Auto3Gbackup {
				param OperationMode uint notify(0,2) readwrite dynamic('wireless3g', 0);
				param InternetHost string notify(0,2) readwrite dynamic('wireless3g', "");
				param SecondAddress string notify(0,2) readwrite dynamic('wireless3g', "");
				param PingTimer uint notify(0,2) readwrite dynamic('wireless3g', 0);
				param PingAccTimer uint notify(0,2) readwrite dynamic('wireless3g', 0);
				param FailCount uint notify(0,2) readwrite dynamic('wireless3g', 0);
			};
		};

		object WWANProfile {
			param ActivatedAPN uint notify(0,2) readwrite dynamic('wireless3g', "");
			param OperationMode uint notify(0,2) readwrite dynamic('wireless3g', "0");
			param WWANNAT bool notify(0,2) readwrite dynamic('wireless3g', "");

			collection APNLists dynamic('wireless3g', "0") {
				default {
					param ProfileName string notify(0,2) readwrite dynamic('wireless3g', "");
					param APN string notify(0,2) readwrite dynamic('wireless3g', "");
					param Dial string notify(0,2) readwrite dynamic('wireless3g', "");
					param AuthenticationType string notify(0,2) readwrite dynamic('wireless3g', "");
					param UserName string notify(0,2) readwrite dynamic('wireless3g', "");
					param Password string notify(0,2) readwrite dynamic('wireless3g', "");
					param InterfaceMetric uint notify(0,2) readwrite dynamic('wireless3g', "");
					param ReadonlyList bool notify(0,2) readonly dynamic('wireless3g', "");
				};
			};
		};
	};

#	object IPPingDiagnostics {
#		param DiagnosticsState string notify(0,1) readwrite internal(1, 1000, "None");
#		param Interface string notify(0,2) readwrite transient("");
#		param Host string notify(0,2) readwrite transient("");
#		param NumberOfRepetitions uint notify(0,2) readwrite transient(0);
#		param Timeout uint notify(0,2) readwrite transient(0);
#		param DataBlockSize uint notify(0,2) readwrite transient(0);
#		param DSCP uint notify(0,2) readwrite transient(0);
#		param SuccessCount uint notify(0,1) readonly transient(0);
#		param FailureCount uint notify(0,1) readonly transient(0);
#		param AverageResponseTime uint notify(0,1) readonly transient(0);
#		param MinimumResponseTime uint notify(0,1) readonly transient(0);
#		param MaximumResponseTime uint notify(0,1) readonly transient(0);
#	};
	object Capabilities {
		object PerformanceDiagnostic {
			param DownloadTransports string notify(0,2) readonly const("HTTP,FTP");
			param UploadTransports string notify(0,2) readonly const("HTTP,FTP");
		};
	};
	object DownloadDiagnostics {
		param DiagnosticsState string notify(0,1) readwrite internal(1, 3000, "None");
		param Interface string notify(0,2) readwrite dynamic('diagnostics', "");
		param DownloadURL string notify(0,2) readwrite dynamic('diagnostics', "");
		param DSCP uint notify(0,2) readwrite dynamic('diagnostics', 0);
		param EthernetPriority uint notify(0,2) readwrite dynamic('diagnostics', 0);
		param ROMTime string notify(0,1) readonly transient(0);
		param BOMTime string notify(0,1) readonly transient(0);
		param EOMTime string notify(0,1) readonly transient(0);
		param TestBytesReceived uint notify(0,1) readonly transient(0);
		param TotalBytesReceived uint notify(0,1) readonly transient(0);
		param TCPOpenRequestTime string notify(0,1) readonly transient(0);
		param TCPOpenResponseTime string notify(0,1) readonly transient(0);
	};
	object UploadDiagnostics {
		param DiagnosticsState string notify(0,1) readwrite internal(1, 4000, "None");
		param Interface string notify(0,2) readwrite dynamic('diagnostics', "");
		param UploadURL string notify(0,2) readwrite dynamic('diagnostics', "");
		param DSCP uint notify(0,2) readwrite dynamic('diagnostics', 0);
		param EthernetPriority uint notify(0,2) readwrite dynamic('diagnostics', 0);
		param TestFileLength uint notify(0,2) readwrite dynamic('diagnostics', 5000);
		param ROMTime string notify(0,1) readonly transient(0);
		param BOMTime string notify(0,1) readonly transient(0);
		param EOMTime string notify(0,1) readonly transient(0);
		param TotalBytesSent uint notify(0,1) readonly transient(0);
		param TCPOpenRequestTime string notify(0,1) readonly transient(0);
		param TCPOpenResponseTime string notify(0,1) readonly transient(0);
	};
	object UDPEchoConfig {
		param Enable bool notify(0,2) readwrite dynamic('diagnostics', 0);
		param Interface string notify(0,2) readwrite dynamic('diagnostics', "");
		param SourceIPAddress string notify(0,2) readwrite dynamic('diagnostics', "0.0.0.0");
		param UDPPort uint notify(0,2) readwrite dynamic('diagnostics', 8088);
		param EchoPlusEnabled bool notify(0,2) readwrite dynamic('diagnostics', 1);
		param EchoPlusSupported bool notify(0,2) readonly const("1");
		param PacketsReceived uint notify(0,1) readonly dynamic('diagnostics', 0);
		param PacketsResponded uint notify(0,1) readonly dynamic('diagnostics', 0);
		param BytesReceived uint notify(0,1) readonly dynamic('diagnostics', 0);
		param BytesResponded uint notify(0,1) readonly dynamic('diagnostics', 0);
		param TimeFirstPacketReceived string notify(0,1) readonly dynamic('diagnostics', "");
		param TimeLastPacketReceived string notify(0,1) readonly dynamic('diagnostics', "");
	};
};
